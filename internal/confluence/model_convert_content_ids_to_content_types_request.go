/*
The Confluence Cloud REST API v2

This document describes Confluence's v2 APIs. This is intended to be an iteration on the existing Confluence Cloud REST API with improvements in both endpoint definitions and performance.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package confluence

import (
	"encoding/json"
)

// checks if the ConvertContentIdsToContentTypesRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConvertContentIdsToContentTypesRequest{}

// ConvertContentIdsToContentTypesRequest struct for ConvertContentIdsToContentTypesRequest
type ConvertContentIdsToContentTypesRequest struct {
	// The content ids to convert. They may be provided as strings or numbers.
	ContentIds []ConvertContentIdsToContentTypesRequestContentIdsInner `json:"contentIds"`
}

// NewConvertContentIdsToContentTypesRequest instantiates a new ConvertContentIdsToContentTypesRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConvertContentIdsToContentTypesRequest(contentIds []ConvertContentIdsToContentTypesRequestContentIdsInner) *ConvertContentIdsToContentTypesRequest {
	this := ConvertContentIdsToContentTypesRequest{}
	this.ContentIds = contentIds
	return &this
}

// NewConvertContentIdsToContentTypesRequestWithDefaults instantiates a new ConvertContentIdsToContentTypesRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConvertContentIdsToContentTypesRequestWithDefaults() *ConvertContentIdsToContentTypesRequest {
	this := ConvertContentIdsToContentTypesRequest{}
	return &this
}

// GetContentIds returns the ContentIds field value
func (o *ConvertContentIdsToContentTypesRequest) GetContentIds() []ConvertContentIdsToContentTypesRequestContentIdsInner {
	if o == nil {
		var ret []ConvertContentIdsToContentTypesRequestContentIdsInner
		return ret
	}

	return o.ContentIds
}

// GetContentIdsOk returns a tuple with the ContentIds field value
// and a boolean to check if the value has been set.
func (o *ConvertContentIdsToContentTypesRequest) GetContentIdsOk() ([]ConvertContentIdsToContentTypesRequestContentIdsInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.ContentIds, true
}

// SetContentIds sets field value
func (o *ConvertContentIdsToContentTypesRequest) SetContentIds(v []ConvertContentIdsToContentTypesRequestContentIdsInner) {
	o.ContentIds = v
}

func (o ConvertContentIdsToContentTypesRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConvertContentIdsToContentTypesRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["contentIds"] = o.ContentIds
	return toSerialize, nil
}

type NullableConvertContentIdsToContentTypesRequest struct {
	value *ConvertContentIdsToContentTypesRequest
	isSet bool
}

func (v NullableConvertContentIdsToContentTypesRequest) Get() *ConvertContentIdsToContentTypesRequest {
	return v.value
}

func (v *NullableConvertContentIdsToContentTypesRequest) Set(val *ConvertContentIdsToContentTypesRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableConvertContentIdsToContentTypesRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableConvertContentIdsToContentTypesRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConvertContentIdsToContentTypesRequest(val *ConvertContentIdsToContentTypesRequest) *NullableConvertContentIdsToContentTypesRequest {
	return &NullableConvertContentIdsToContentTypesRequest{value: val, isSet: true}
}

func (v NullableConvertContentIdsToContentTypesRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConvertContentIdsToContentTypesRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
