/*
The Confluence Cloud REST API v2

This document describes Confluence's v2 APIs. This is intended to be an iteration on the existing Confluence Cloud REST API with improvements in both endpoint definitions and performance.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package confluence

import (
	"encoding/json"
	"fmt"
)

// InlineCommentResolutionStatus Inline comment resolution status
type InlineCommentResolutionStatus string

// List of InlineCommentResolutionStatus
const (
	INLINECOMMENTRESOLUTIONSTATUS_OPEN     InlineCommentResolutionStatus = "open"
	INLINECOMMENTRESOLUTIONSTATUS_REOPENED InlineCommentResolutionStatus = "reopened"
	INLINECOMMENTRESOLUTIONSTATUS_RESOLVED InlineCommentResolutionStatus = "resolved"
	INLINECOMMENTRESOLUTIONSTATUS_DANGLING InlineCommentResolutionStatus = "dangling"
)

// All allowed values of InlineCommentResolutionStatus enum
var AllowedInlineCommentResolutionStatusEnumValues = []InlineCommentResolutionStatus{
	"open",
	"reopened",
	"resolved",
	"dangling",
}

func (v *InlineCommentResolutionStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := InlineCommentResolutionStatus(value)
	for _, existing := range AllowedInlineCommentResolutionStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid InlineCommentResolutionStatus", value)
}

// NewInlineCommentResolutionStatusFromValue returns a pointer to a valid InlineCommentResolutionStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewInlineCommentResolutionStatusFromValue(v string) (*InlineCommentResolutionStatus, error) {
	ev := InlineCommentResolutionStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for InlineCommentResolutionStatus: valid values are %v", v, AllowedInlineCommentResolutionStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v InlineCommentResolutionStatus) IsValid() bool {
	for _, existing := range AllowedInlineCommentResolutionStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to InlineCommentResolutionStatus value
func (v InlineCommentResolutionStatus) Ptr() *InlineCommentResolutionStatus {
	return &v
}

type NullableInlineCommentResolutionStatus struct {
	value *InlineCommentResolutionStatus
	isSet bool
}

func (v NullableInlineCommentResolutionStatus) Get() *InlineCommentResolutionStatus {
	return v.value
}

func (v *NullableInlineCommentResolutionStatus) Set(val *InlineCommentResolutionStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineCommentResolutionStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineCommentResolutionStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineCommentResolutionStatus(val *InlineCommentResolutionStatus) *NullableInlineCommentResolutionStatus {
	return &NullableInlineCommentResolutionStatus{value: val, isSet: true}
}

func (v NullableInlineCommentResolutionStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineCommentResolutionStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
