/*
The Confluence Cloud REST API v2

This document describes Confluence's v2 APIs. This is intended to be an iteration on the existing Confluence Cloud REST API with improvements in both endpoint definitions and performance.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package confluence

import (
	"encoding/json"
	"time"
)

// checks if the Task type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Task{}

// Task struct for Task
type Task struct {
	Id         *TaskId         `json:"id,omitempty"`
	LocalId    *TaskLocalId    `json:"localId,omitempty"`
	SpaceId    *TaskSpaceId    `json:"spaceId,omitempty"`
	PageId     *TaskPageId     `json:"pageId,omitempty"`
	BlogPostId *TaskBlogPostId `json:"blogPostId,omitempty"`
	// Status of the task.
	Status *string `json:"status,omitempty"`
	Body   *Body   `json:"body,omitempty"`
	// Account ID of the user who created this task.
	CreatedBy *string `json:"createdBy,omitempty"`
	// Account ID of the user to whom this task is assigned.
	AssignedTo *string `json:"assignedTo,omitempty"`
	// Account ID of the user who completed this task.
	CompletedBy *string `json:"completedBy,omitempty"`
	// Date and time when the task was created. In format \"YYYY-MM-DDTHH:mm:ss.sssZ\".
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	// Date and time when the task was updated. In format \"YYYY-MM-DDTHH:mm:ss.sssZ\".
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
	// Date and time when the task is due. In format \"YYYY-MM-DDTHH:mm:ss.sssZ\".
	DueAt *time.Time `json:"dueAt,omitempty"`
	// Date and time when the task was completed. In format \"YYYY-MM-DDTHH:mm:ss.sssZ\".
	CompletedAt *time.Time `json:"completedAt,omitempty"`
}

// NewTask instantiates a new Task object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTask() *Task {
	this := Task{}
	return &this
}

// NewTaskWithDefaults instantiates a new Task object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaskWithDefaults() *Task {
	this := Task{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Task) GetId() TaskId {
	if o == nil || IsNil(o.Id) {
		var ret TaskId
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetIdOk() (*TaskId, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Task) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given TaskId and assigns it to the Id field.
func (o *Task) SetId(v TaskId) {
	o.Id = &v
}

// GetLocalId returns the LocalId field value if set, zero value otherwise.
func (o *Task) GetLocalId() TaskLocalId {
	if o == nil || IsNil(o.LocalId) {
		var ret TaskLocalId
		return ret
	}
	return *o.LocalId
}

// GetLocalIdOk returns a tuple with the LocalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetLocalIdOk() (*TaskLocalId, bool) {
	if o == nil || IsNil(o.LocalId) {
		return nil, false
	}
	return o.LocalId, true
}

// HasLocalId returns a boolean if a field has been set.
func (o *Task) HasLocalId() bool {
	if o != nil && !IsNil(o.LocalId) {
		return true
	}

	return false
}

// SetLocalId gets a reference to the given TaskLocalId and assigns it to the LocalId field.
func (o *Task) SetLocalId(v TaskLocalId) {
	o.LocalId = &v
}

// GetSpaceId returns the SpaceId field value if set, zero value otherwise.
func (o *Task) GetSpaceId() TaskSpaceId {
	if o == nil || IsNil(o.SpaceId) {
		var ret TaskSpaceId
		return ret
	}
	return *o.SpaceId
}

// GetSpaceIdOk returns a tuple with the SpaceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetSpaceIdOk() (*TaskSpaceId, bool) {
	if o == nil || IsNil(o.SpaceId) {
		return nil, false
	}
	return o.SpaceId, true
}

// HasSpaceId returns a boolean if a field has been set.
func (o *Task) HasSpaceId() bool {
	if o != nil && !IsNil(o.SpaceId) {
		return true
	}

	return false
}

// SetSpaceId gets a reference to the given TaskSpaceId and assigns it to the SpaceId field.
func (o *Task) SetSpaceId(v TaskSpaceId) {
	o.SpaceId = &v
}

// GetPageId returns the PageId field value if set, zero value otherwise.
func (o *Task) GetPageId() TaskPageId {
	if o == nil || IsNil(o.PageId) {
		var ret TaskPageId
		return ret
	}
	return *o.PageId
}

// GetPageIdOk returns a tuple with the PageId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetPageIdOk() (*TaskPageId, bool) {
	if o == nil || IsNil(o.PageId) {
		return nil, false
	}
	return o.PageId, true
}

// HasPageId returns a boolean if a field has been set.
func (o *Task) HasPageId() bool {
	if o != nil && !IsNil(o.PageId) {
		return true
	}

	return false
}

// SetPageId gets a reference to the given TaskPageId and assigns it to the PageId field.
func (o *Task) SetPageId(v TaskPageId) {
	o.PageId = &v
}

// GetBlogPostId returns the BlogPostId field value if set, zero value otherwise.
func (o *Task) GetBlogPostId() TaskBlogPostId {
	if o == nil || IsNil(o.BlogPostId) {
		var ret TaskBlogPostId
		return ret
	}
	return *o.BlogPostId
}

// GetBlogPostIdOk returns a tuple with the BlogPostId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetBlogPostIdOk() (*TaskBlogPostId, bool) {
	if o == nil || IsNil(o.BlogPostId) {
		return nil, false
	}
	return o.BlogPostId, true
}

// HasBlogPostId returns a boolean if a field has been set.
func (o *Task) HasBlogPostId() bool {
	if o != nil && !IsNil(o.BlogPostId) {
		return true
	}

	return false
}

// SetBlogPostId gets a reference to the given TaskBlogPostId and assigns it to the BlogPostId field.
func (o *Task) SetBlogPostId(v TaskBlogPostId) {
	o.BlogPostId = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Task) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Task) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *Task) SetStatus(v string) {
	o.Status = &v
}

// GetBody returns the Body field value if set, zero value otherwise.
func (o *Task) GetBody() Body {
	if o == nil || IsNil(o.Body) {
		var ret Body
		return ret
	}
	return *o.Body
}

// GetBodyOk returns a tuple with the Body field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetBodyOk() (*Body, bool) {
	if o == nil || IsNil(o.Body) {
		return nil, false
	}
	return o.Body, true
}

// HasBody returns a boolean if a field has been set.
func (o *Task) HasBody() bool {
	if o != nil && !IsNil(o.Body) {
		return true
	}

	return false
}

// SetBody gets a reference to the given Body and assigns it to the Body field.
func (o *Task) SetBody(v Body) {
	o.Body = &v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *Task) GetCreatedBy() string {
	if o == nil || IsNil(o.CreatedBy) {
		var ret string
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetCreatedByOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedBy) {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *Task) HasCreatedBy() bool {
	if o != nil && !IsNil(o.CreatedBy) {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given string and assigns it to the CreatedBy field.
func (o *Task) SetCreatedBy(v string) {
	o.CreatedBy = &v
}

// GetAssignedTo returns the AssignedTo field value if set, zero value otherwise.
func (o *Task) GetAssignedTo() string {
	if o == nil || IsNil(o.AssignedTo) {
		var ret string
		return ret
	}
	return *o.AssignedTo
}

// GetAssignedToOk returns a tuple with the AssignedTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetAssignedToOk() (*string, bool) {
	if o == nil || IsNil(o.AssignedTo) {
		return nil, false
	}
	return o.AssignedTo, true
}

// HasAssignedTo returns a boolean if a field has been set.
func (o *Task) HasAssignedTo() bool {
	if o != nil && !IsNil(o.AssignedTo) {
		return true
	}

	return false
}

// SetAssignedTo gets a reference to the given string and assigns it to the AssignedTo field.
func (o *Task) SetAssignedTo(v string) {
	o.AssignedTo = &v
}

// GetCompletedBy returns the CompletedBy field value if set, zero value otherwise.
func (o *Task) GetCompletedBy() string {
	if o == nil || IsNil(o.CompletedBy) {
		var ret string
		return ret
	}
	return *o.CompletedBy
}

// GetCompletedByOk returns a tuple with the CompletedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetCompletedByOk() (*string, bool) {
	if o == nil || IsNil(o.CompletedBy) {
		return nil, false
	}
	return o.CompletedBy, true
}

// HasCompletedBy returns a boolean if a field has been set.
func (o *Task) HasCompletedBy() bool {
	if o != nil && !IsNil(o.CompletedBy) {
		return true
	}

	return false
}

// SetCompletedBy gets a reference to the given string and assigns it to the CompletedBy field.
func (o *Task) SetCompletedBy(v string) {
	o.CompletedBy = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *Task) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *Task) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *Task) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *Task) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *Task) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *Task) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetDueAt returns the DueAt field value if set, zero value otherwise.
func (o *Task) GetDueAt() time.Time {
	if o == nil || IsNil(o.DueAt) {
		var ret time.Time
		return ret
	}
	return *o.DueAt
}

// GetDueAtOk returns a tuple with the DueAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetDueAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DueAt) {
		return nil, false
	}
	return o.DueAt, true
}

// HasDueAt returns a boolean if a field has been set.
func (o *Task) HasDueAt() bool {
	if o != nil && !IsNil(o.DueAt) {
		return true
	}

	return false
}

// SetDueAt gets a reference to the given time.Time and assigns it to the DueAt field.
func (o *Task) SetDueAt(v time.Time) {
	o.DueAt = &v
}

// GetCompletedAt returns the CompletedAt field value if set, zero value otherwise.
func (o *Task) GetCompletedAt() time.Time {
	if o == nil || IsNil(o.CompletedAt) {
		var ret time.Time
		return ret
	}
	return *o.CompletedAt
}

// GetCompletedAtOk returns a tuple with the CompletedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetCompletedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CompletedAt) {
		return nil, false
	}
	return o.CompletedAt, true
}

// HasCompletedAt returns a boolean if a field has been set.
func (o *Task) HasCompletedAt() bool {
	if o != nil && !IsNil(o.CompletedAt) {
		return true
	}

	return false
}

// SetCompletedAt gets a reference to the given time.Time and assigns it to the CompletedAt field.
func (o *Task) SetCompletedAt(v time.Time) {
	o.CompletedAt = &v
}

func (o Task) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Task) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.LocalId) {
		toSerialize["localId"] = o.LocalId
	}
	if !IsNil(o.SpaceId) {
		toSerialize["spaceId"] = o.SpaceId
	}
	if !IsNil(o.PageId) {
		toSerialize["pageId"] = o.PageId
	}
	if !IsNil(o.BlogPostId) {
		toSerialize["blogPostId"] = o.BlogPostId
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Body) {
		toSerialize["body"] = o.Body
	}
	if !IsNil(o.CreatedBy) {
		toSerialize["createdBy"] = o.CreatedBy
	}
	if !IsNil(o.AssignedTo) {
		toSerialize["assignedTo"] = o.AssignedTo
	}
	if !IsNil(o.CompletedBy) {
		toSerialize["completedBy"] = o.CompletedBy
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	if !IsNil(o.DueAt) {
		toSerialize["dueAt"] = o.DueAt
	}
	if !IsNil(o.CompletedAt) {
		toSerialize["completedAt"] = o.CompletedAt
	}
	return toSerialize, nil
}

type NullableTask struct {
	value *Task
	isSet bool
}

func (v NullableTask) Get() *Task {
	return v.value
}

func (v *NullableTask) Set(val *Task) {
	v.value = val
	v.isSet = true
}

func (v NullableTask) IsSet() bool {
	return v.isSet
}

func (v *NullableTask) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTask(val *Task) *NullableTask {
	return &NullableTask{value: val, isSet: true}
}

func (v NullableTask) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTask) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
