/*
The Confluence Cloud REST API v2

This document describes Confluence's v2 APIs. This is intended to be an iteration on the existing Confluence Cloud REST API with improvements in both endpoint definitions and performance.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package confluence

import (
	"encoding/json"
	"fmt"
)

// LabelSortOrder The sort fields for labels. The default sort direction is ascending. To sort in descending order, append a `-` character before the sort field. For example, `fieldName` or `-fieldName`.
type LabelSortOrder string

// List of LabelSortOrder
const (
	LABELSORTORDER_CREATED_DATE_ASC  LabelSortOrder = "created-date"
	LABELSORTORDER_CREATED_DATE_DESC LabelSortOrder = "-created-date"
	LABELSORTORDER_ID_ASC            LabelSortOrder = "id"
	LABELSORTORDER_ID_DESC           LabelSortOrder = "-id"
	LABELSORTORDER_NAME_ASC          LabelSortOrder = "name"
	LABELSORTORDER_NAME_DESC         LabelSortOrder = "-name"
)

// All allowed values of LabelSortOrder enum
var AllowedLabelSortOrderEnumValues = []LabelSortOrder{
	"created-date",
	"-created-date",
	"id",
	"-id",
	"name",
	"-name",
}

func (v *LabelSortOrder) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LabelSortOrder(value)
	for _, existing := range AllowedLabelSortOrderEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LabelSortOrder", value)
}

// NewLabelSortOrderFromValue returns a pointer to a valid LabelSortOrder
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLabelSortOrderFromValue(v string) (*LabelSortOrder, error) {
	ev := LabelSortOrder(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LabelSortOrder: valid values are %v", v, AllowedLabelSortOrderEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LabelSortOrder) IsValid() bool {
	for _, existing := range AllowedLabelSortOrderEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LabelSortOrder value
func (v LabelSortOrder) Ptr() *LabelSortOrder {
	return &v
}

type NullableLabelSortOrder struct {
	value *LabelSortOrder
	isSet bool
}

func (v NullableLabelSortOrder) Get() *LabelSortOrder {
	return v.value
}

func (v *NullableLabelSortOrder) Set(val *LabelSortOrder) {
	v.value = val
	v.isSet = true
}

func (v NullableLabelSortOrder) IsSet() bool {
	return v.isSet
}

func (v *NullableLabelSortOrder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLabelSortOrder(val *LabelSortOrder) *NullableLabelSortOrder {
	return &NullableLabelSortOrder{value: val, isSet: true}
}

func (v NullableLabelSortOrder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLabelSortOrder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
