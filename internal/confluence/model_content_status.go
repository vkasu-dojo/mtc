/*
The Confluence Cloud REST API v2

This document describes Confluence's v2 APIs. This is intended to be an iteration on the existing Confluence Cloud REST API with improvements in both endpoint definitions and performance.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package confluence

import (
	"encoding/json"
	"fmt"
)

// ContentStatus The status of the content.
type ContentStatus string

// List of ContentStatus
const (
	CONTENTSTATUS_CURRENT    ContentStatus = "current"
	CONTENTSTATUS_TRASHED    ContentStatus = "trashed"
	CONTENTSTATUS_HISTORICAL ContentStatus = "historical"
	CONTENTSTATUS_DELETED    ContentStatus = "deleted"
	CONTENTSTATUS_ANY        ContentStatus = "any"
	CONTENTSTATUS_DRAFT      ContentStatus = "draft"
	CONTENTSTATUS_ARCHIVED   ContentStatus = "archived"
)

// All allowed values of ContentStatus enum
var AllowedContentStatusEnumValues = []ContentStatus{
	"current",
	"trashed",
	"historical",
	"deleted",
	"any",
	"draft",
	"archived",
}

func (v *ContentStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ContentStatus(value)
	for _, existing := range AllowedContentStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ContentStatus", value)
}

// NewContentStatusFromValue returns a pointer to a valid ContentStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewContentStatusFromValue(v string) (*ContentStatus, error) {
	ev := ContentStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ContentStatus: valid values are %v", v, AllowedContentStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ContentStatus) IsValid() bool {
	for _, existing := range AllowedContentStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ContentStatus value
func (v ContentStatus) Ptr() *ContentStatus {
	return &v
}

type NullableContentStatus struct {
	value *ContentStatus
	isSet bool
}

func (v NullableContentStatus) Get() *ContentStatus {
	return v.value
}

func (v *NullableContentStatus) Set(val *ContentStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableContentStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableContentStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContentStatus(val *ContentStatus) *NullableContentStatus {
	return &NullableContentStatus{value: val, isSet: true}
}

func (v NullableContentStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContentStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
