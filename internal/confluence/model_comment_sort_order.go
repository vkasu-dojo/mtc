/*
The Confluence Cloud REST API v2

This document describes Confluence's v2 APIs. This is intended to be an iteration on the existing Confluence Cloud REST API with improvements in both endpoint definitions and performance.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package confluence

import (
	"encoding/json"
	"fmt"
)

// CommentSortOrder The sort fields for comments. The default sort direction is ascending. To sort in descending order, append a `-` character before the sort field. For example, `fieldName` or `-fieldName`.
type CommentSortOrder string

// List of CommentSortOrder
const (
	COMMENTSORTORDER_CREATED_DATE_ASC   CommentSortOrder = "created-date"
	COMMENTSORTORDER_CREATED_DATE_DESC  CommentSortOrder = "-created-date"
	COMMENTSORTORDER_MODIFIED_DATE_ASC  CommentSortOrder = "modified-date"
	COMMENTSORTORDER_MODIFIED_DATE_DESC CommentSortOrder = "-modified-date"
)

// All allowed values of CommentSortOrder enum
var AllowedCommentSortOrderEnumValues = []CommentSortOrder{
	"created-date",
	"-created-date",
	"modified-date",
	"-modified-date",
}

func (v *CommentSortOrder) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CommentSortOrder(value)
	for _, existing := range AllowedCommentSortOrderEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CommentSortOrder", value)
}

// NewCommentSortOrderFromValue returns a pointer to a valid CommentSortOrder
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCommentSortOrderFromValue(v string) (*CommentSortOrder, error) {
	ev := CommentSortOrder(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CommentSortOrder: valid values are %v", v, AllowedCommentSortOrderEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CommentSortOrder) IsValid() bool {
	for _, existing := range AllowedCommentSortOrderEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CommentSortOrder value
func (v CommentSortOrder) Ptr() *CommentSortOrder {
	return &v
}

type NullableCommentSortOrder struct {
	value *CommentSortOrder
	isSet bool
}

func (v NullableCommentSortOrder) Get() *CommentSortOrder {
	return v.value
}

func (v *NullableCommentSortOrder) Set(val *CommentSortOrder) {
	v.value = val
	v.isSet = true
}

func (v NullableCommentSortOrder) IsSet() bool {
	return v.isSet
}

func (v *NullableCommentSortOrder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommentSortOrder(val *CommentSortOrder) *NullableCommentSortOrder {
	return &NullableCommentSortOrder{value: val, isSet: true}
}

func (v NullableCommentSortOrder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommentSortOrder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
