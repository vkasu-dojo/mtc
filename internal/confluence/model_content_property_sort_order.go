/*
The Confluence Cloud REST API v2

This document describes Confluence's v2 APIs. This is intended to be an iteration on the existing Confluence Cloud REST API with improvements in both endpoint definitions and performance.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package confluence

import (
	"encoding/json"
	"fmt"
)

// ContentPropertySortOrder The sort fields for content properties. The default sort direction is ascending. To sort in descending order, append a `-` character before the sort field. For example, `fieldName` or `-fieldName`.
type ContentPropertySortOrder string

// List of ContentPropertySortOrder
const (
	CONTENTPROPERTYSORTORDER_KEY_ASC  ContentPropertySortOrder = "key"
	CONTENTPROPERTYSORTORDER_KEY_DESC ContentPropertySortOrder = "-key"
)

// All allowed values of ContentPropertySortOrder enum
var AllowedContentPropertySortOrderEnumValues = []ContentPropertySortOrder{
	"key",
	"-key",
}

func (v *ContentPropertySortOrder) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ContentPropertySortOrder(value)
	for _, existing := range AllowedContentPropertySortOrderEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ContentPropertySortOrder", value)
}

// NewContentPropertySortOrderFromValue returns a pointer to a valid ContentPropertySortOrder
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewContentPropertySortOrderFromValue(v string) (*ContentPropertySortOrder, error) {
	ev := ContentPropertySortOrder(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ContentPropertySortOrder: valid values are %v", v, AllowedContentPropertySortOrderEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ContentPropertySortOrder) IsValid() bool {
	for _, existing := range AllowedContentPropertySortOrderEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ContentPropertySortOrder value
func (v ContentPropertySortOrder) Ptr() *ContentPropertySortOrder {
	return &v
}

type NullableContentPropertySortOrder struct {
	value *ContentPropertySortOrder
	isSet bool
}

func (v NullableContentPropertySortOrder) Get() *ContentPropertySortOrder {
	return v.value
}

func (v *NullableContentPropertySortOrder) Set(val *ContentPropertySortOrder) {
	v.value = val
	v.isSet = true
}

func (v NullableContentPropertySortOrder) IsSet() bool {
	return v.isSet
}

func (v *NullableContentPropertySortOrder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContentPropertySortOrder(val *ContentPropertySortOrder) *NullableContentPropertySortOrder {
	return &NullableContentPropertySortOrder{value: val, isSet: true}
}

func (v NullableContentPropertySortOrder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContentPropertySortOrder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
