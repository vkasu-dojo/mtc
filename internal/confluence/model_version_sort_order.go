/*
The Confluence Cloud REST API v2

This document describes Confluence's v2 APIs. This is intended to be an iteration on the existing Confluence Cloud REST API with improvements in both endpoint definitions and performance.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package confluence

import (
	"encoding/json"
	"fmt"
)

// VersionSortOrder The sort fields for versions. The default sort direction is ascending. To sort in descending order, append a `-` character before the sort field. For example, `fieldName` or `-fieldName`.
type VersionSortOrder string

// List of VersionSortOrder
const (
	VERSIONSORTORDER_MODIFIED_DATE_ASC  VersionSortOrder = "modified-date"
	VERSIONSORTORDER_MODIFIED_DATE_DESC VersionSortOrder = "-modified-date"
)

// All allowed values of VersionSortOrder enum
var AllowedVersionSortOrderEnumValues = []VersionSortOrder{
	"modified-date",
	"-modified-date",
}

func (v *VersionSortOrder) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VersionSortOrder(value)
	for _, existing := range AllowedVersionSortOrderEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VersionSortOrder", value)
}

// NewVersionSortOrderFromValue returns a pointer to a valid VersionSortOrder
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVersionSortOrderFromValue(v string) (*VersionSortOrder, error) {
	ev := VersionSortOrder(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VersionSortOrder: valid values are %v", v, AllowedVersionSortOrderEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VersionSortOrder) IsValid() bool {
	for _, existing := range AllowedVersionSortOrderEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VersionSortOrder value
func (v VersionSortOrder) Ptr() *VersionSortOrder {
	return &v
}

type NullableVersionSortOrder struct {
	value *VersionSortOrder
	isSet bool
}

func (v NullableVersionSortOrder) Get() *VersionSortOrder {
	return v.value
}

func (v *NullableVersionSortOrder) Set(val *VersionSortOrder) {
	v.value = val
	v.isSet = true
}

func (v NullableVersionSortOrder) IsSet() bool {
	return v.isSet
}

func (v *NullableVersionSortOrder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVersionSortOrder(val *VersionSortOrder) *NullableVersionSortOrder {
	return &NullableVersionSortOrder{value: val, isSet: true}
}

func (v NullableVersionSortOrder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVersionSortOrder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
