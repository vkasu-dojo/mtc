/*
The Confluence Cloud REST API v2

This document describes Confluence's v2 APIs. This is intended to be an iteration on the existing Confluence Cloud REST API with improvements in both endpoint definitions and performance.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package confluence

import (
	"encoding/json"
	"time"
)

// checks if the UpdateTaskRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateTaskRequest{}

// UpdateTaskRequest struct for UpdateTaskRequest
type UpdateTaskRequest struct {
	// ID of the task.
	Id *string `json:"id,omitempty"`
	// Local ID of the task. This ID is local to the corresponding page or blog post.
	LocalId *string `json:"localId,omitempty"`
	// ID of the space the task is in.
	SpaceId *string `json:"spaceId,omitempty"`
	// ID of the page the task is in.
	PageId *string `json:"pageId,omitempty"`
	// ID of the blog post the task is in.
	BlogPostId *string `json:"blogPostId,omitempty"`
	// Status of the task.
	Status string `json:"status"`
	// Account ID of the user who created this task.
	CreatedBy *string `json:"createdBy,omitempty"`
	// Account ID of the user to whom this task is assigned.
	AssignedTo *string `json:"assignedTo,omitempty"`
	// Account ID of the user who completed this task.
	CompletedBy *string `json:"completedBy,omitempty"`
	// Date and time when the task was created. In format \"YYYY-MM-DDTHH:mm:ss.sssZ\".
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	// Date and time when the task was updated. In format \"YYYY-MM-DDTHH:mm:ss.sssZ\".
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
	// Date and time when the task is due. In format \"YYYY-MM-DDTHH:mm:ss.sssZ\".
	DueAt *time.Time `json:"dueAt,omitempty"`
	// Date and time when the task was completed. In format \"YYYY-MM-DDTHH:mm:ss.sssZ\".
	CompletedAt *time.Time `json:"completedAt,omitempty"`
}

// NewUpdateTaskRequest instantiates a new UpdateTaskRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateTaskRequest(status string) *UpdateTaskRequest {
	this := UpdateTaskRequest{}
	this.Status = status
	return &this
}

// NewUpdateTaskRequestWithDefaults instantiates a new UpdateTaskRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateTaskRequestWithDefaults() *UpdateTaskRequest {
	this := UpdateTaskRequest{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *UpdateTaskRequest) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateTaskRequest) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *UpdateTaskRequest) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *UpdateTaskRequest) SetId(v string) {
	o.Id = &v
}

// GetLocalId returns the LocalId field value if set, zero value otherwise.
func (o *UpdateTaskRequest) GetLocalId() string {
	if o == nil || IsNil(o.LocalId) {
		var ret string
		return ret
	}
	return *o.LocalId
}

// GetLocalIdOk returns a tuple with the LocalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateTaskRequest) GetLocalIdOk() (*string, bool) {
	if o == nil || IsNil(o.LocalId) {
		return nil, false
	}
	return o.LocalId, true
}

// HasLocalId returns a boolean if a field has been set.
func (o *UpdateTaskRequest) HasLocalId() bool {
	if o != nil && !IsNil(o.LocalId) {
		return true
	}

	return false
}

// SetLocalId gets a reference to the given string and assigns it to the LocalId field.
func (o *UpdateTaskRequest) SetLocalId(v string) {
	o.LocalId = &v
}

// GetSpaceId returns the SpaceId field value if set, zero value otherwise.
func (o *UpdateTaskRequest) GetSpaceId() string {
	if o == nil || IsNil(o.SpaceId) {
		var ret string
		return ret
	}
	return *o.SpaceId
}

// GetSpaceIdOk returns a tuple with the SpaceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateTaskRequest) GetSpaceIdOk() (*string, bool) {
	if o == nil || IsNil(o.SpaceId) {
		return nil, false
	}
	return o.SpaceId, true
}

// HasSpaceId returns a boolean if a field has been set.
func (o *UpdateTaskRequest) HasSpaceId() bool {
	if o != nil && !IsNil(o.SpaceId) {
		return true
	}

	return false
}

// SetSpaceId gets a reference to the given string and assigns it to the SpaceId field.
func (o *UpdateTaskRequest) SetSpaceId(v string) {
	o.SpaceId = &v
}

// GetPageId returns the PageId field value if set, zero value otherwise.
func (o *UpdateTaskRequest) GetPageId() string {
	if o == nil || IsNil(o.PageId) {
		var ret string
		return ret
	}
	return *o.PageId
}

// GetPageIdOk returns a tuple with the PageId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateTaskRequest) GetPageIdOk() (*string, bool) {
	if o == nil || IsNil(o.PageId) {
		return nil, false
	}
	return o.PageId, true
}

// HasPageId returns a boolean if a field has been set.
func (o *UpdateTaskRequest) HasPageId() bool {
	if o != nil && !IsNil(o.PageId) {
		return true
	}

	return false
}

// SetPageId gets a reference to the given string and assigns it to the PageId field.
func (o *UpdateTaskRequest) SetPageId(v string) {
	o.PageId = &v
}

// GetBlogPostId returns the BlogPostId field value if set, zero value otherwise.
func (o *UpdateTaskRequest) GetBlogPostId() string {
	if o == nil || IsNil(o.BlogPostId) {
		var ret string
		return ret
	}
	return *o.BlogPostId
}

// GetBlogPostIdOk returns a tuple with the BlogPostId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateTaskRequest) GetBlogPostIdOk() (*string, bool) {
	if o == nil || IsNil(o.BlogPostId) {
		return nil, false
	}
	return o.BlogPostId, true
}

// HasBlogPostId returns a boolean if a field has been set.
func (o *UpdateTaskRequest) HasBlogPostId() bool {
	if o != nil && !IsNil(o.BlogPostId) {
		return true
	}

	return false
}

// SetBlogPostId gets a reference to the given string and assigns it to the BlogPostId field.
func (o *UpdateTaskRequest) SetBlogPostId(v string) {
	o.BlogPostId = &v
}

// GetStatus returns the Status field value
func (o *UpdateTaskRequest) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *UpdateTaskRequest) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *UpdateTaskRequest) SetStatus(v string) {
	o.Status = v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *UpdateTaskRequest) GetCreatedBy() string {
	if o == nil || IsNil(o.CreatedBy) {
		var ret string
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateTaskRequest) GetCreatedByOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedBy) {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *UpdateTaskRequest) HasCreatedBy() bool {
	if o != nil && !IsNil(o.CreatedBy) {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given string and assigns it to the CreatedBy field.
func (o *UpdateTaskRequest) SetCreatedBy(v string) {
	o.CreatedBy = &v
}

// GetAssignedTo returns the AssignedTo field value if set, zero value otherwise.
func (o *UpdateTaskRequest) GetAssignedTo() string {
	if o == nil || IsNil(o.AssignedTo) {
		var ret string
		return ret
	}
	return *o.AssignedTo
}

// GetAssignedToOk returns a tuple with the AssignedTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateTaskRequest) GetAssignedToOk() (*string, bool) {
	if o == nil || IsNil(o.AssignedTo) {
		return nil, false
	}
	return o.AssignedTo, true
}

// HasAssignedTo returns a boolean if a field has been set.
func (o *UpdateTaskRequest) HasAssignedTo() bool {
	if o != nil && !IsNil(o.AssignedTo) {
		return true
	}

	return false
}

// SetAssignedTo gets a reference to the given string and assigns it to the AssignedTo field.
func (o *UpdateTaskRequest) SetAssignedTo(v string) {
	o.AssignedTo = &v
}

// GetCompletedBy returns the CompletedBy field value if set, zero value otherwise.
func (o *UpdateTaskRequest) GetCompletedBy() string {
	if o == nil || IsNil(o.CompletedBy) {
		var ret string
		return ret
	}
	return *o.CompletedBy
}

// GetCompletedByOk returns a tuple with the CompletedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateTaskRequest) GetCompletedByOk() (*string, bool) {
	if o == nil || IsNil(o.CompletedBy) {
		return nil, false
	}
	return o.CompletedBy, true
}

// HasCompletedBy returns a boolean if a field has been set.
func (o *UpdateTaskRequest) HasCompletedBy() bool {
	if o != nil && !IsNil(o.CompletedBy) {
		return true
	}

	return false
}

// SetCompletedBy gets a reference to the given string and assigns it to the CompletedBy field.
func (o *UpdateTaskRequest) SetCompletedBy(v string) {
	o.CompletedBy = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *UpdateTaskRequest) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateTaskRequest) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *UpdateTaskRequest) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *UpdateTaskRequest) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *UpdateTaskRequest) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateTaskRequest) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *UpdateTaskRequest) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *UpdateTaskRequest) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetDueAt returns the DueAt field value if set, zero value otherwise.
func (o *UpdateTaskRequest) GetDueAt() time.Time {
	if o == nil || IsNil(o.DueAt) {
		var ret time.Time
		return ret
	}
	return *o.DueAt
}

// GetDueAtOk returns a tuple with the DueAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateTaskRequest) GetDueAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DueAt) {
		return nil, false
	}
	return o.DueAt, true
}

// HasDueAt returns a boolean if a field has been set.
func (o *UpdateTaskRequest) HasDueAt() bool {
	if o != nil && !IsNil(o.DueAt) {
		return true
	}

	return false
}

// SetDueAt gets a reference to the given time.Time and assigns it to the DueAt field.
func (o *UpdateTaskRequest) SetDueAt(v time.Time) {
	o.DueAt = &v
}

// GetCompletedAt returns the CompletedAt field value if set, zero value otherwise.
func (o *UpdateTaskRequest) GetCompletedAt() time.Time {
	if o == nil || IsNil(o.CompletedAt) {
		var ret time.Time
		return ret
	}
	return *o.CompletedAt
}

// GetCompletedAtOk returns a tuple with the CompletedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateTaskRequest) GetCompletedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CompletedAt) {
		return nil, false
	}
	return o.CompletedAt, true
}

// HasCompletedAt returns a boolean if a field has been set.
func (o *UpdateTaskRequest) HasCompletedAt() bool {
	if o != nil && !IsNil(o.CompletedAt) {
		return true
	}

	return false
}

// SetCompletedAt gets a reference to the given time.Time and assigns it to the CompletedAt field.
func (o *UpdateTaskRequest) SetCompletedAt(v time.Time) {
	o.CompletedAt = &v
}

func (o UpdateTaskRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateTaskRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.LocalId) {
		toSerialize["localId"] = o.LocalId
	}
	if !IsNil(o.SpaceId) {
		toSerialize["spaceId"] = o.SpaceId
	}
	if !IsNil(o.PageId) {
		toSerialize["pageId"] = o.PageId
	}
	if !IsNil(o.BlogPostId) {
		toSerialize["blogPostId"] = o.BlogPostId
	}
	toSerialize["status"] = o.Status
	if !IsNil(o.CreatedBy) {
		toSerialize["createdBy"] = o.CreatedBy
	}
	if !IsNil(o.AssignedTo) {
		toSerialize["assignedTo"] = o.AssignedTo
	}
	if !IsNil(o.CompletedBy) {
		toSerialize["completedBy"] = o.CompletedBy
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	if !IsNil(o.DueAt) {
		toSerialize["dueAt"] = o.DueAt
	}
	if !IsNil(o.CompletedAt) {
		toSerialize["completedAt"] = o.CompletedAt
	}
	return toSerialize, nil
}

type NullableUpdateTaskRequest struct {
	value *UpdateTaskRequest
	isSet bool
}

func (v NullableUpdateTaskRequest) Get() *UpdateTaskRequest {
	return v.value
}

func (v *NullableUpdateTaskRequest) Set(val *UpdateTaskRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateTaskRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateTaskRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateTaskRequest(val *UpdateTaskRequest) *NullableUpdateTaskRequest {
	return &NullableUpdateTaskRequest{value: val, isSet: true}
}

func (v NullableUpdateTaskRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateTaskRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
