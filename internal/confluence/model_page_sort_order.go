/*
The Confluence Cloud REST API v2

This document describes Confluence's v2 APIs. This is intended to be an iteration on the existing Confluence Cloud REST API with improvements in both endpoint definitions and performance.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package confluence

import (
	"encoding/json"
	"fmt"
)

// PageSortOrder The sort fields for pages. The default sort direction is ascending. To sort in descending order, append a `-` character before the sort field. For example, `fieldName` or `-fieldName`.
type PageSortOrder string

// List of PageSortOrder
const (
	PAGESORTORDER_ID_ASC             PageSortOrder = "id"
	PAGESORTORDER_ID_DESC            PageSortOrder = "-id"
	PAGESORTORDER_CREATED_DATE_ASC   PageSortOrder = "created-date"
	PAGESORTORDER_CREATED_DATE_DESC  PageSortOrder = "-created-date"
	PAGESORTORDER_MODIFIED_DATE_ASC  PageSortOrder = "modified-date"
	PAGESORTORDER_MODIFIED_DATE_DESC PageSortOrder = "-modified-date"
)

// All allowed values of PageSortOrder enum
var AllowedPageSortOrderEnumValues = []PageSortOrder{
	"id",
	"-id",
	"created-date",
	"-created-date",
	"modified-date",
	"-modified-date",
}

func (v *PageSortOrder) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PageSortOrder(value)
	for _, existing := range AllowedPageSortOrderEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PageSortOrder", value)
}

// NewPageSortOrderFromValue returns a pointer to a valid PageSortOrder
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPageSortOrderFromValue(v string) (*PageSortOrder, error) {
	ev := PageSortOrder(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PageSortOrder: valid values are %v", v, AllowedPageSortOrderEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PageSortOrder) IsValid() bool {
	for _, existing := range AllowedPageSortOrderEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PageSortOrder value
func (v PageSortOrder) Ptr() *PageSortOrder {
	return &v
}

type NullablePageSortOrder struct {
	value *PageSortOrder
	isSet bool
}

func (v NullablePageSortOrder) Get() *PageSortOrder {
	return v.value
}

func (v *NullablePageSortOrder) Set(val *PageSortOrder) {
	v.value = val
	v.isSet = true
}

func (v NullablePageSortOrder) IsSet() bool {
	return v.isSet
}

func (v *NullablePageSortOrder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePageSortOrder(val *PageSortOrder) *NullablePageSortOrder {
	return &NullablePageSortOrder{value: val, isSet: true}
}

func (v NullablePageSortOrder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePageSortOrder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
