/*
The Confluence Cloud REST API v2

This document describes Confluence's v2 APIs. This is intended to be an iteration on the existing Confluence Cloud REST API with improvements in both endpoint definitions and performance.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package confluence

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)

type ContentApi interface {

	/*
		ConvertContentIdsToContentTypes Convert content ids to content types

		Converts a list of content ids into their associated content types. This is useful for users migrating from v1 to v2
	who may have stored just content ids without their associated type. This will return types as they should be used in v2.
	Notably, this will return `inline-comment` for inline comments and `footer-comment` for footer comments, which is distinct from them
	both being represented by `comment` in v1.

	**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
	Permission to view the requested content. Any content that the user does not have permission to view or does not exist will map to `null` in the response.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiConvertContentIdsToContentTypesRequest
	*/
	ConvertContentIdsToContentTypes(ctx context.Context) ApiConvertContentIdsToContentTypesRequest

	// ConvertContentIdsToContentTypesExecute executes the request
	//  @return ContentIdToContentTypeResponse
	ConvertContentIdsToContentTypesExecute(r ApiConvertContentIdsToContentTypesRequest) (*ContentIdToContentTypeResponse, *http.Response, error)
}

// ContentApiService ContentApi service
type ContentApiService service

type ApiConvertContentIdsToContentTypesRequest struct {
	ctx                                    context.Context
	ApiService                             ContentApi
	convertContentIdsToContentTypesRequest *ConvertContentIdsToContentTypesRequest
}

func (r ApiConvertContentIdsToContentTypesRequest) ConvertContentIdsToContentTypesRequest(convertContentIdsToContentTypesRequest ConvertContentIdsToContentTypesRequest) ApiConvertContentIdsToContentTypesRequest {
	r.convertContentIdsToContentTypesRequest = &convertContentIdsToContentTypesRequest
	return r
}

func (r ApiConvertContentIdsToContentTypesRequest) Execute() (*ContentIdToContentTypeResponse, *http.Response, error) {
	return r.ApiService.ConvertContentIdsToContentTypesExecute(r)
}

/*
ConvertContentIdsToContentTypes Convert content ids to content types

Converts a list of content ids into their associated content types. This is useful for users migrating from v1 to v2
who may have stored just content ids without their associated type. This will return types as they should be used in v2.
Notably, this will return `inline-comment` for inline comments and `footer-comment` for footer comments, which is distinct from them
both being represented by `comment` in v1.

**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
Permission to view the requested content. Any content that the user does not have permission to view or does not exist will map to `null` in the response.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiConvertContentIdsToContentTypesRequest
*/
func (a *ContentApiService) ConvertContentIdsToContentTypes(ctx context.Context) ApiConvertContentIdsToContentTypesRequest {
	return ApiConvertContentIdsToContentTypesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ContentIdToContentTypeResponse
func (a *ContentApiService) ConvertContentIdsToContentTypesExecute(r ApiConvertContentIdsToContentTypesRequest) (*ContentIdToContentTypeResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ContentIdToContentTypeResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentApiService.ConvertContentIdsToContentTypes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/content/convert-ids-to-types"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.convertContentIdsToContentTypesRequest == nil {
		return localVarReturnValue, nil, reportError("convertContentIdsToContentTypesRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.convertContentIdsToContentTypesRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
