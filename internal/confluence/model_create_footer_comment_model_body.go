/*
The Confluence Cloud REST API v2

This document describes Confluence's v2 APIs. This is intended to be an iteration on the existing Confluence Cloud REST API with improvements in both endpoint definitions and performance.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package confluence

import (
	"encoding/json"
	"fmt"
)

// CreateFooterCommentModelBody - struct for CreateFooterCommentModelBody
type CreateFooterCommentModelBody struct {
	CommentBodyWrite       *CommentBodyWrite
	CommentNestedBodyWrite *CommentNestedBodyWrite
}

// CommentBodyWriteAsCreateFooterCommentModelBody is a convenience function that returns CommentBodyWrite wrapped in CreateFooterCommentModelBody
func CommentBodyWriteAsCreateFooterCommentModelBody(v *CommentBodyWrite) CreateFooterCommentModelBody {
	return CreateFooterCommentModelBody{
		CommentBodyWrite: v,
	}
}

// CommentNestedBodyWriteAsCreateFooterCommentModelBody is a convenience function that returns CommentNestedBodyWrite wrapped in CreateFooterCommentModelBody
func CommentNestedBodyWriteAsCreateFooterCommentModelBody(v *CommentNestedBodyWrite) CreateFooterCommentModelBody {
	return CreateFooterCommentModelBody{
		CommentNestedBodyWrite: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *CreateFooterCommentModelBody) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into CommentBodyWrite
	err = newStrictDecoder(data).Decode(&dst.CommentBodyWrite)
	if err == nil {
		jsonCommentBodyWrite, _ := json.Marshal(dst.CommentBodyWrite)
		if string(jsonCommentBodyWrite) == "{}" { // empty struct
			dst.CommentBodyWrite = nil
		} else {
			match++
		}
	} else {
		dst.CommentBodyWrite = nil
	}

	// try to unmarshal data into CommentNestedBodyWrite
	err = newStrictDecoder(data).Decode(&dst.CommentNestedBodyWrite)
	if err == nil {
		jsonCommentNestedBodyWrite, _ := json.Marshal(dst.CommentNestedBodyWrite)
		if string(jsonCommentNestedBodyWrite) == "{}" { // empty struct
			dst.CommentNestedBodyWrite = nil
		} else {
			match++
		}
	} else {
		dst.CommentNestedBodyWrite = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.CommentBodyWrite = nil
		dst.CommentNestedBodyWrite = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CreateFooterCommentModelBody)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CreateFooterCommentModelBody)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CreateFooterCommentModelBody) MarshalJSON() ([]byte, error) {
	if src.CommentBodyWrite != nil {
		return json.Marshal(&src.CommentBodyWrite)
	}

	if src.CommentNestedBodyWrite != nil {
		return json.Marshal(&src.CommentNestedBodyWrite)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CreateFooterCommentModelBody) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.CommentBodyWrite != nil {
		return obj.CommentBodyWrite
	}

	if obj.CommentNestedBodyWrite != nil {
		return obj.CommentNestedBodyWrite
	}

	// all schemas are nil
	return nil
}

type NullableCreateFooterCommentModelBody struct {
	value *CreateFooterCommentModelBody
	isSet bool
}

func (v NullableCreateFooterCommentModelBody) Get() *CreateFooterCommentModelBody {
	return v.value
}

func (v *NullableCreateFooterCommentModelBody) Set(val *CreateFooterCommentModelBody) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateFooterCommentModelBody) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateFooterCommentModelBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateFooterCommentModelBody(val *CreateFooterCommentModelBody) *NullableCreateFooterCommentModelBody {
	return &NullableCreateFooterCommentModelBody{value: val, isSet: true}
}

func (v NullableCreateFooterCommentModelBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateFooterCommentModelBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
