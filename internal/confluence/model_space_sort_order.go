/*
The Confluence Cloud REST API v2

This document describes Confluence's v2 APIs. This is intended to be an iteration on the existing Confluence Cloud REST API with improvements in both endpoint definitions and performance.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package confluence

import (
	"encoding/json"
	"fmt"
)

// SpaceSortOrder The sort fields for spaces. The default sort direction is ascending. To sort in descending order, append a `-` character before the sort field. For example, `fieldName` or `-fieldName`.
type SpaceSortOrder string

// List of SpaceSortOrder
const (
	SPACESORTORDER_ID_ASC    SpaceSortOrder = "id"
	SPACESORTORDER_ID_DESC   SpaceSortOrder = "-id"
	SPACESORTORDER_KEY_ASC   SpaceSortOrder = "key"
	SPACESORTORDER_KEY_DESC  SpaceSortOrder = "-key"
	SPACESORTORDER_NAME_ASC  SpaceSortOrder = "name"
	SPACESORTORDER_NAME_DESC SpaceSortOrder = "-name"
)

// All allowed values of SpaceSortOrder enum
var AllowedSpaceSortOrderEnumValues = []SpaceSortOrder{
	"id",
	"-id",
	"key",
	"-key",
	"name",
	"-name",
}

func (v *SpaceSortOrder) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SpaceSortOrder(value)
	for _, existing := range AllowedSpaceSortOrderEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SpaceSortOrder", value)
}

// NewSpaceSortOrderFromValue returns a pointer to a valid SpaceSortOrder
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSpaceSortOrderFromValue(v string) (*SpaceSortOrder, error) {
	ev := SpaceSortOrder(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SpaceSortOrder: valid values are %v", v, AllowedSpaceSortOrderEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SpaceSortOrder) IsValid() bool {
	for _, existing := range AllowedSpaceSortOrderEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SpaceSortOrder value
func (v SpaceSortOrder) Ptr() *SpaceSortOrder {
	return &v
}

type NullableSpaceSortOrder struct {
	value *SpaceSortOrder
	isSet bool
}

func (v NullableSpaceSortOrder) Get() *SpaceSortOrder {
	return v.value
}

func (v *NullableSpaceSortOrder) Set(val *SpaceSortOrder) {
	v.value = val
	v.isSet = true
}

func (v NullableSpaceSortOrder) IsSet() bool {
	return v.isSet
}

func (v *NullableSpaceSortOrder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpaceSortOrder(val *SpaceSortOrder) *NullableSpaceSortOrder {
	return &NullableSpaceSortOrder{value: val, isSet: true}
}

func (v NullableSpaceSortOrder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpaceSortOrder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
