/*
The Confluence Cloud REST API v2

This document describes Confluence's v2 APIs. This is intended to be an iteration on the existing Confluence Cloud REST API with improvements in both endpoint definitions and performance.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package confluence

import (
	"encoding/json"
	"fmt"
)

// SpaceType The type of space.
type SpaceType string

// List of SpaceType
const (
	SPACETYPE_GLOBAL   SpaceType = "global"
	SPACETYPE_PERSONAL SpaceType = "personal"
)

// All allowed values of SpaceType enum
var AllowedSpaceTypeEnumValues = []SpaceType{
	"global",
	"personal",
}

func (v *SpaceType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SpaceType(value)
	for _, existing := range AllowedSpaceTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SpaceType", value)
}

// NewSpaceTypeFromValue returns a pointer to a valid SpaceType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSpaceTypeFromValue(v string) (*SpaceType, error) {
	ev := SpaceType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SpaceType: valid values are %v", v, AllowedSpaceTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SpaceType) IsValid() bool {
	for _, existing := range AllowedSpaceTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SpaceType value
func (v SpaceType) Ptr() *SpaceType {
	return &v
}

type NullableSpaceType struct {
	value *SpaceType
	isSet bool
}

func (v NullableSpaceType) Get() *SpaceType {
	return v.value
}

func (v *NullableSpaceType) Set(val *SpaceType) {
	v.value = val
	v.isSet = true
}

func (v NullableSpaceType) IsSet() bool {
	return v.isSet
}

func (v *NullableSpaceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpaceType(val *SpaceType) *NullableSpaceType {
	return &NullableSpaceType{value: val, isSet: true}
}

func (v NullableSpaceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpaceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
