/*
The Confluence Cloud REST API v2

This document describes Confluence's v2 APIs. This is intended to be an iteration on the existing Confluence Cloud REST API with improvements in both endpoint definitions and performance.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package confluence

import (
	"encoding/json"
	"fmt"
)

// AttachmentSortOrder The sort fields for attachments. The default sort direction is ascending. To sort in descending order, append a `-` character before the sort field. For example, `fieldName` or `-fieldName`.
type AttachmentSortOrder string

// List of AttachmentSortOrder
const (
	ATTACHMENTSORTORDER_CREATED_DATE_ASC   AttachmentSortOrder = "created-date"
	ATTACHMENTSORTORDER_CREATED_DATE_DESC  AttachmentSortOrder = "-created-date"
	ATTACHMENTSORTORDER_MODIFIED_DATE_ASC  AttachmentSortOrder = "modified-date"
	ATTACHMENTSORTORDER_MODIFIED_DATE_DESC AttachmentSortOrder = "-modified-date"
)

// All allowed values of AttachmentSortOrder enum
var AllowedAttachmentSortOrderEnumValues = []AttachmentSortOrder{
	"created-date",
	"-created-date",
	"modified-date",
	"-modified-date",
}

func (v *AttachmentSortOrder) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AttachmentSortOrder(value)
	for _, existing := range AllowedAttachmentSortOrderEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AttachmentSortOrder", value)
}

// NewAttachmentSortOrderFromValue returns a pointer to a valid AttachmentSortOrder
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAttachmentSortOrderFromValue(v string) (*AttachmentSortOrder, error) {
	ev := AttachmentSortOrder(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AttachmentSortOrder: valid values are %v", v, AllowedAttachmentSortOrderEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AttachmentSortOrder) IsValid() bool {
	for _, existing := range AllowedAttachmentSortOrderEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AttachmentSortOrder value
func (v AttachmentSortOrder) Ptr() *AttachmentSortOrder {
	return &v
}

type NullableAttachmentSortOrder struct {
	value *AttachmentSortOrder
	isSet bool
}

func (v NullableAttachmentSortOrder) Get() *AttachmentSortOrder {
	return v.value
}

func (v *NullableAttachmentSortOrder) Set(val *AttachmentSortOrder) {
	v.value = val
	v.isSet = true
}

func (v NullableAttachmentSortOrder) IsSet() bool {
	return v.isSet
}

func (v *NullableAttachmentSortOrder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAttachmentSortOrder(val *AttachmentSortOrder) *NullableAttachmentSortOrder {
	return &NullableAttachmentSortOrder{value: val, isSet: true}
}

func (v NullableAttachmentSortOrder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAttachmentSortOrder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
