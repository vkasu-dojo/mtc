/*
The Confluence Cloud REST API v2

This document describes Confluence's v2 APIs. This is intended to be an iteration on the existing Confluence Cloud REST API with improvements in both endpoint definitions and performance.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package confluence

import (
	"encoding/json"
	"fmt"
)

// BodyRepresentation The formats a body can be represented as.
type BodyRepresentation string

// List of BodyRepresentation
const (
	BODYREPRESENTATION_ANONYMOUS_EXPORT_VIEW BodyRepresentation = "anonymous_export_view"
	BODYREPRESENTATION_ATLAS_DOC_FORMAT      BodyRepresentation = "atlas_doc_format"
	BODYREPRESENTATION_DYNAMIC               BodyRepresentation = "dynamic"
	BODYREPRESENTATION_EDITOR                BodyRepresentation = "editor"
	BODYREPRESENTATION_EDITOR2               BodyRepresentation = "editor2"
	BODYREPRESENTATION_EXPORT_VIEW           BodyRepresentation = "export_view"
	BODYREPRESENTATION_PLAIN                 BodyRepresentation = "plain"
	BODYREPRESENTATION_RAW                   BodyRepresentation = "raw"
	BODYREPRESENTATION_STORAGE               BodyRepresentation = "storage"
	BODYREPRESENTATION_STYLED_VIEW           BodyRepresentation = "styled_view"
	BODYREPRESENTATION_VIEW                  BodyRepresentation = "view"
)

// All allowed values of BodyRepresentation enum
var AllowedBodyRepresentationEnumValues = []BodyRepresentation{
	"anonymous_export_view",
	"atlas_doc_format",
	"dynamic",
	"editor",
	"editor2",
	"export_view",
	"plain",
	"raw",
	"storage",
	"styled_view",
	"view",
}

func (v *BodyRepresentation) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BodyRepresentation(value)
	for _, existing := range AllowedBodyRepresentationEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BodyRepresentation", value)
}

// NewBodyRepresentationFromValue returns a pointer to a valid BodyRepresentation
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBodyRepresentationFromValue(v string) (*BodyRepresentation, error) {
	ev := BodyRepresentation(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BodyRepresentation: valid values are %v", v, AllowedBodyRepresentationEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BodyRepresentation) IsValid() bool {
	for _, existing := range AllowedBodyRepresentationEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BodyRepresentation value
func (v BodyRepresentation) Ptr() *BodyRepresentation {
	return &v
}

type NullableBodyRepresentation struct {
	value *BodyRepresentation
	isSet bool
}

func (v NullableBodyRepresentation) Get() *BodyRepresentation {
	return v.value
}

func (v *NullableBodyRepresentation) Set(val *BodyRepresentation) {
	v.value = val
	v.isSet = true
}

func (v NullableBodyRepresentation) IsSet() bool {
	return v.isSet
}

func (v *NullableBodyRepresentation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBodyRepresentation(val *BodyRepresentation) *NullableBodyRepresentation {
	return &NullableBodyRepresentation{value: val, isSet: true}
}

func (v NullableBodyRepresentation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBodyRepresentation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
