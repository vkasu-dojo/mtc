/*
The Confluence Cloud REST API v2

This document describes Confluence's v2 APIs. This is intended to be an iteration on the existing Confluence Cloud REST API with improvements in both endpoint definitions and performance.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package confluence

import (
	"encoding/json"
)

// checks if the ContentIdToContentTypeResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContentIdToContentTypeResponse{}

// ContentIdToContentTypeResponse struct for ContentIdToContentTypeResponse
type ContentIdToContentTypeResponse struct {
	// JSON object containing all requested content ids as keys and their associated content types as the values. Duplicate content ids in the request will be returned under a single key in the response. For built-in content types, the enumerations are as specified. Custom content ids will be mapped to their associated type.
	Results *map[string]ContentIdToContentTypeResponseResultsValue `json:"results,omitempty"`
}

// NewContentIdToContentTypeResponse instantiates a new ContentIdToContentTypeResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContentIdToContentTypeResponse() *ContentIdToContentTypeResponse {
	this := ContentIdToContentTypeResponse{}
	return &this
}

// NewContentIdToContentTypeResponseWithDefaults instantiates a new ContentIdToContentTypeResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContentIdToContentTypeResponseWithDefaults() *ContentIdToContentTypeResponse {
	this := ContentIdToContentTypeResponse{}
	return &this
}

// GetResults returns the Results field value if set, zero value otherwise.
func (o *ContentIdToContentTypeResponse) GetResults() map[string]ContentIdToContentTypeResponseResultsValue {
	if o == nil || IsNil(o.Results) {
		var ret map[string]ContentIdToContentTypeResponseResultsValue
		return ret
	}
	return *o.Results
}

// GetResultsOk returns a tuple with the Results field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContentIdToContentTypeResponse) GetResultsOk() (*map[string]ContentIdToContentTypeResponseResultsValue, bool) {
	if o == nil || IsNil(o.Results) {
		return nil, false
	}
	return o.Results, true
}

// HasResults returns a boolean if a field has been set.
func (o *ContentIdToContentTypeResponse) HasResults() bool {
	if o != nil && !IsNil(o.Results) {
		return true
	}

	return false
}

// SetResults gets a reference to the given map[string]ContentIdToContentTypeResponseResultsValue and assigns it to the Results field.
func (o *ContentIdToContentTypeResponse) SetResults(v map[string]ContentIdToContentTypeResponseResultsValue) {
	o.Results = &v
}

func (o ContentIdToContentTypeResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContentIdToContentTypeResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Results) {
		toSerialize["results"] = o.Results
	}
	return toSerialize, nil
}

type NullableContentIdToContentTypeResponse struct {
	value *ContentIdToContentTypeResponse
	isSet bool
}

func (v NullableContentIdToContentTypeResponse) Get() *ContentIdToContentTypeResponse {
	return v.value
}

func (v *NullableContentIdToContentTypeResponse) Set(val *ContentIdToContentTypeResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableContentIdToContentTypeResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableContentIdToContentTypeResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContentIdToContentTypeResponse(val *ContentIdToContentTypeResponse) *NullableContentIdToContentTypeResponse {
	return &NullableContentIdToContentTypeResponse{value: val, isSet: true}
}

func (v NullableContentIdToContentTypeResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContentIdToContentTypeResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
