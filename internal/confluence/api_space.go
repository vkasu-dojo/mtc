/*
The Confluence Cloud REST API v2

This document describes Confluence's v2 APIs. This is intended to be an iteration on the existing Confluence Cloud REST API with improvements in both endpoint definitions and performance.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package confluence

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"reflect"
	"strings"
)

type SpaceApi interface {

	/*
		GetSpaceById Get space by id

		Returns a specific space.

	**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
	Permission to view the space.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param id The ID of the space to be returned.
		@return ApiGetSpaceByIdRequest
	*/
	GetSpaceById(ctx context.Context, id int64) ApiGetSpaceByIdRequest

	// GetSpaceByIdExecute executes the request
	//  @return Space
	GetSpaceByIdExecute(r ApiGetSpaceByIdRequest) (*Space, *http.Response, error)

	/*
		GetSpaces Get spaces

		Returns all spaces. The results will be sorted by id ascending. The number of results is limited by the `limit` parameter and
	additional results (if available) will be available through the `next` URL present in the `Link` response header.

	**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
	Permission to access the Confluence site ('Can use' global permission).
	Only spaces that the user has permission to view will be returned.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiGetSpacesRequest
	*/
	GetSpaces(ctx context.Context) ApiGetSpacesRequest

	// GetSpacesExecute executes the request
	//  @return MultiEntityResultSpace
	GetSpacesExecute(r ApiGetSpacesRequest) (*MultiEntityResultSpace, *http.Response, error)
}

// SpaceApiService SpaceApi service
type SpaceApiService service

type ApiGetSpaceByIdRequest struct {
	ctx               context.Context
	ApiService        SpaceApi
	id                int64
	descriptionFormat *SpaceDescriptionBodyRepresentation
}

// The content format type to be returned in the &#x60;description&#x60; field of the response. If available, the representation will be available under a response field of the same name under the &#x60;description&#x60; field.
func (r ApiGetSpaceByIdRequest) DescriptionFormat(descriptionFormat SpaceDescriptionBodyRepresentation) ApiGetSpaceByIdRequest {
	r.descriptionFormat = &descriptionFormat
	return r
}

func (r ApiGetSpaceByIdRequest) Execute() (*Space, *http.Response, error) {
	return r.ApiService.GetSpaceByIdExecute(r)
}

/*
GetSpaceById Get space by id

Returns a specific space.

**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
Permission to view the space.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id The ID of the space to be returned.
	@return ApiGetSpaceByIdRequest
*/
func (a *SpaceApiService) GetSpaceById(ctx context.Context, id int64) ApiGetSpaceByIdRequest {
	return ApiGetSpaceByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Space
func (a *SpaceApiService) GetSpaceByIdExecute(r ApiGetSpaceByIdRequest) (*Space, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Space
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SpaceApiService.GetSpaceById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/spaces/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.descriptionFormat != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description-format", r.descriptionFormat, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSpacesRequest struct {
	ctx                   context.Context
	ApiService            SpaceApi
	ids                   *[]int64
	keys                  *[]string
	type_                 *string
	status                *string
	labels                *[]string
	sort                  *SpaceSortOrder
	descriptionFormat     *SpaceDescriptionBodyRepresentation
	cursor                *string
	limit                 *int32
	serializeIdsAsStrings *bool
}

// Filter the results to spaces based on their IDs. Multiple IDs can be specified as a comma-separated list.
func (r ApiGetSpacesRequest) Ids(ids []int64) ApiGetSpacesRequest {
	r.ids = &ids
	return r
}

// Filter the results to spaces based on their keys. Multiple keys can be specified as a comma-separated list.
func (r ApiGetSpacesRequest) Keys(keys []string) ApiGetSpacesRequest {
	r.keys = &keys
	return r
}

// Filter the results to spaces based on their type.
func (r ApiGetSpacesRequest) Type_(type_ string) ApiGetSpacesRequest {
	r.type_ = &type_
	return r
}

// Filter the results to spaces based on their status.
func (r ApiGetSpacesRequest) Status(status string) ApiGetSpacesRequest {
	r.status = &status
	return r
}

// Filter the results to spaces based on their labels. Multiple labels can be specified as a comma-separated list.
func (r ApiGetSpacesRequest) Labels(labels []string) ApiGetSpacesRequest {
	r.labels = &labels
	return r
}

// Used to sort the result by a particular field.
func (r ApiGetSpacesRequest) Sort(sort SpaceSortOrder) ApiGetSpacesRequest {
	r.sort = &sort
	return r
}

// The content format type to be returned in the &#x60;description&#x60; field of the response. If available, the representation will be available under a response field of the same name under the &#x60;description&#x60; field.
func (r ApiGetSpacesRequest) DescriptionFormat(descriptionFormat SpaceDescriptionBodyRepresentation) ApiGetSpacesRequest {
	r.descriptionFormat = &descriptionFormat
	return r
}

// Used for pagination, this opaque cursor will be returned in the &#x60;next&#x60; URL in the &#x60;Link&#x60; response header. Use the relative URL in the &#x60;Link&#x60; header to retrieve the &#x60;next&#x60; set of results.
func (r ApiGetSpacesRequest) Cursor(cursor string) ApiGetSpacesRequest {
	r.cursor = &cursor
	return r
}

// Maximum number of spaces per result to return. If more results exist, use the &#x60;Link&#x60; response header to retrieve a relative URL that will return the next set of results.
func (r ApiGetSpacesRequest) Limit(limit int32) ApiGetSpacesRequest {
	r.limit = &limit
	return r
}

// Due to JavaScript&#39;s max integer representation of 2^53-1, the type of any IDs returned in the response body for this endpoint will be changed from a numeric type to a string type at the end of the deprecation period. In the meantime, this query param can be passed to this endpoint to opt-in to this change now. See this [changelog](https://developer.atlassian.com/cloud/confluence/changelog/#CHANGE-905) for more detail.
func (r ApiGetSpacesRequest) SerializeIdsAsStrings(serializeIdsAsStrings bool) ApiGetSpacesRequest {
	r.serializeIdsAsStrings = &serializeIdsAsStrings
	return r
}

func (r ApiGetSpacesRequest) Execute() (*MultiEntityResultSpace, *http.Response, error) {
	return r.ApiService.GetSpacesExecute(r)
}

/*
GetSpaces Get spaces

Returns all spaces. The results will be sorted by id ascending. The number of results is limited by the `limit` parameter and
additional results (if available) will be available through the `next` URL present in the `Link` response header.

**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
Permission to access the Confluence site ('Can use' global permission).
Only spaces that the user has permission to view will be returned.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetSpacesRequest
*/
func (a *SpaceApiService) GetSpaces(ctx context.Context) ApiGetSpacesRequest {
	return ApiGetSpacesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return MultiEntityResultSpace
func (a *SpaceApiService) GetSpacesExecute(r ApiGetSpacesRequest) (*MultiEntityResultSpace, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *MultiEntityResultSpace
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SpaceApiService.GetSpaces")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/spaces"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ids != nil {
		t := *r.ids
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ids", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ids", t, "multi")
		}
	}
	if r.keys != nil {
		t := *r.keys
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "keys", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "keys", t, "multi")
		}
	}
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "")
	}
	if r.status != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "status", r.status, "")
	}
	if r.labels != nil {
		t := *r.labels
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "labels", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "labels", t, "multi")
		}
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "")
	}
	if r.descriptionFormat != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description-format", r.descriptionFormat, "")
	}
	if r.cursor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cursor", r.cursor, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.serializeIdsAsStrings != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "serialize-ids-as-strings", r.serializeIdsAsStrings, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
