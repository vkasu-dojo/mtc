/*
The Confluence Cloud REST API v2

This document describes Confluence's v2 APIs. This is intended to be an iteration on the existing Confluence Cloud REST API with improvements in both endpoint definitions and performance.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package confluence

import (
	"encoding/json"
	"fmt"
)

// ChildPageSortOrder The sort fields for child pages. The default sort direction is ascending by child-position. To sort in descending order, append a `-` character before the sort field. For example, `fieldName` or `-fieldName`.
type ChildPageSortOrder string

// List of ChildPageSortOrder
const (
	CHILDPAGESORTORDER_CREATED_DATE_ASC    ChildPageSortOrder = "created-date"
	CHILDPAGESORTORDER_CREATED_DATE_DESC   ChildPageSortOrder = "-created-date"
	CHILDPAGESORTORDER_ID_ASC              ChildPageSortOrder = "id"
	CHILDPAGESORTORDER_ID_DESC             ChildPageSortOrder = "-id"
	CHILDPAGESORTORDER_CHILD_POSITION_ASC  ChildPageSortOrder = "child-position"
	CHILDPAGESORTORDER_CHILD_POSITION_DESC ChildPageSortOrder = "-child-position"
	CHILDPAGESORTORDER_MODIFIED_DATE_ASC   ChildPageSortOrder = "modified-date"
	CHILDPAGESORTORDER_MODIFIED_DATE_DESC  ChildPageSortOrder = "-modified-date"
)

// All allowed values of ChildPageSortOrder enum
var AllowedChildPageSortOrderEnumValues = []ChildPageSortOrder{
	"created-date",
	"-created-date",
	"id",
	"-id",
	"child-position",
	"-child-position",
	"modified-date",
	"-modified-date",
}

func (v *ChildPageSortOrder) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ChildPageSortOrder(value)
	for _, existing := range AllowedChildPageSortOrderEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ChildPageSortOrder", value)
}

// NewChildPageSortOrderFromValue returns a pointer to a valid ChildPageSortOrder
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewChildPageSortOrderFromValue(v string) (*ChildPageSortOrder, error) {
	ev := ChildPageSortOrder(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ChildPageSortOrder: valid values are %v", v, AllowedChildPageSortOrderEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ChildPageSortOrder) IsValid() bool {
	for _, existing := range AllowedChildPageSortOrderEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ChildPageSortOrder value
func (v ChildPageSortOrder) Ptr() *ChildPageSortOrder {
	return &v
}

type NullableChildPageSortOrder struct {
	value *ChildPageSortOrder
	isSet bool
}

func (v NullableChildPageSortOrder) Get() *ChildPageSortOrder {
	return v.value
}

func (v *NullableChildPageSortOrder) Set(val *ChildPageSortOrder) {
	v.value = val
	v.isSet = true
}

func (v NullableChildPageSortOrder) IsSet() bool {
	return v.isSet
}

func (v *NullableChildPageSortOrder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChildPageSortOrder(val *ChildPageSortOrder) *NullableChildPageSortOrder {
	return &NullableChildPageSortOrder{value: val, isSet: true}
}

func (v NullableChildPageSortOrder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChildPageSortOrder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
