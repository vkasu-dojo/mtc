/*
The Confluence Cloud REST API v2

This document describes Confluence's v2 APIs. This is intended to be an iteration on the existing Confluence Cloud REST API with improvements in both endpoint definitions and performance.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package confluence

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

type SpacePropertiesApi interface {

	/*
		CreateSpaceProperty Create space property in space

		Creates a new space property.

	**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
	Permission to access the Confluence site ('Can use' global permission) and 'Admin' permission for the space.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param spaceId The ID of the space for which space properties should be returned.
		@return ApiCreateSpacePropertyRequest
	*/
	CreateSpaceProperty(ctx context.Context, spaceId int64) ApiCreateSpacePropertyRequest

	// CreateSpacePropertyExecute executes the request
	//  @return SpaceProperty
	CreateSpacePropertyExecute(r ApiCreateSpacePropertyRequest) (*SpaceProperty, *http.Response, error)

	/*
		DeleteSpacePropertyById Delete space property by id

		Deletes a space property by its id.

	**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
	Permission to access the Confluence site ('Can use' global permission) and 'Admin' permission for the space.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param spaceId The ID of the space the property belongs to.
		@param propertyId The ID of the property to be deleted.
		@return ApiDeleteSpacePropertyByIdRequest
	*/
	DeleteSpacePropertyById(ctx context.Context, spaceId int64, propertyId int64) ApiDeleteSpacePropertyByIdRequest

	// DeleteSpacePropertyByIdExecute executes the request
	DeleteSpacePropertyByIdExecute(r ApiDeleteSpacePropertyByIdRequest) (*http.Response, error)

	/*
		GetSpaceProperties Get space properties in space

		Returns all properties for the given space. Space properties are a key-value storage associated with a space.
	The limit parameter specifies the maximum number of results returned in a single response. Use the `link` response header
	to paginate through additional results.

	**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
	Permission to access the Confluence site ('Can use' global permission) and 'View' permission for the space.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param spaceId The ID of the space for which space properties should be returned.
		@return ApiGetSpacePropertiesRequest
	*/
	GetSpaceProperties(ctx context.Context, spaceId int64) ApiGetSpacePropertiesRequest

	// GetSpacePropertiesExecute executes the request
	//  @return MultiEntityResultSpaceProperty
	GetSpacePropertiesExecute(r ApiGetSpacePropertiesRequest) (*MultiEntityResultSpaceProperty, *http.Response, error)

	/*
		GetSpacePropertyById Get space property by id

		Retrieve a space property by its id.

	**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
	Permission to access the Confluence site ('Can use' global permission) and 'View' permission for the space.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param spaceId The ID of the space the property belongs to.
		@param propertyId The ID of the property to be retrieved.
		@return ApiGetSpacePropertyByIdRequest
	*/
	GetSpacePropertyById(ctx context.Context, spaceId int64, propertyId int64) ApiGetSpacePropertyByIdRequest

	// GetSpacePropertyByIdExecute executes the request
	//  @return SpaceProperty
	GetSpacePropertyByIdExecute(r ApiGetSpacePropertyByIdRequest) (*SpaceProperty, *http.Response, error)

	/*
		UpdateSpacePropertyById Update space property by id

		Update a space property by its id.

	**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
	Permission to access the Confluence site ('Can use' global permission) and 'Admin' permission for the space.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param spaceId The ID of the space the property belongs to.
		@param propertyId The ID of the property to be updated.
		@return ApiUpdateSpacePropertyByIdRequest
	*/
	UpdateSpacePropertyById(ctx context.Context, spaceId int64, propertyId int64) ApiUpdateSpacePropertyByIdRequest

	// UpdateSpacePropertyByIdExecute executes the request
	//  @return SpaceProperty
	UpdateSpacePropertyByIdExecute(r ApiUpdateSpacePropertyByIdRequest) (*SpaceProperty, *http.Response, error)
}

// SpacePropertiesApiService SpacePropertiesApi service
type SpacePropertiesApiService service

type ApiCreateSpacePropertyRequest struct {
	ctx                        context.Context
	ApiService                 SpacePropertiesApi
	spaceId                    int64
	spacePropertyCreateRequest *SpacePropertyCreateRequest
	serializeIdsAsStrings      *bool
}

// The space property to be created
func (r ApiCreateSpacePropertyRequest) SpacePropertyCreateRequest(spacePropertyCreateRequest SpacePropertyCreateRequest) ApiCreateSpacePropertyRequest {
	r.spacePropertyCreateRequest = &spacePropertyCreateRequest
	return r
}

// Due to JavaScript&#39;s max integer representation of 2^53-1, the type of any IDs returned in the response body for this endpoint will be changed from a numeric type to a string type at the end of the deprecation period. In the meantime, this query param can be passed to this endpoint to opt-in to this change now. See this [changelog](https://developer.atlassian.com/cloud/confluence/changelog/#CHANGE-905) for more detail.
func (r ApiCreateSpacePropertyRequest) SerializeIdsAsStrings(serializeIdsAsStrings bool) ApiCreateSpacePropertyRequest {
	r.serializeIdsAsStrings = &serializeIdsAsStrings
	return r
}

func (r ApiCreateSpacePropertyRequest) Execute() (*SpaceProperty, *http.Response, error) {
	return r.ApiService.CreateSpacePropertyExecute(r)
}

/*
CreateSpaceProperty Create space property in space

Creates a new space property.

**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
Permission to access the Confluence site ('Can use' global permission) and 'Admin' permission for the space.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param spaceId The ID of the space for which space properties should be returned.
	@return ApiCreateSpacePropertyRequest
*/
func (a *SpacePropertiesApiService) CreateSpaceProperty(ctx context.Context, spaceId int64) ApiCreateSpacePropertyRequest {
	return ApiCreateSpacePropertyRequest{
		ApiService: a,
		ctx:        ctx,
		spaceId:    spaceId,
	}
}

// Execute executes the request
//
//	@return SpaceProperty
func (a *SpacePropertiesApiService) CreateSpacePropertyExecute(r ApiCreateSpacePropertyRequest) (*SpaceProperty, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SpaceProperty
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SpacePropertiesApiService.CreateSpaceProperty")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/spaces/{space-id}/properties"
	localVarPath = strings.Replace(localVarPath, "{"+"space-id"+"}", url.PathEscape(parameterValueToString(r.spaceId, "spaceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.spacePropertyCreateRequest == nil {
		return localVarReturnValue, nil, reportError("spacePropertyCreateRequest is required and must be specified")
	}

	if r.serializeIdsAsStrings != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "serialize-ids-as-strings", r.serializeIdsAsStrings, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.spacePropertyCreateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteSpacePropertyByIdRequest struct {
	ctx        context.Context
	ApiService SpacePropertiesApi
	spaceId    int64
	propertyId int64
}

func (r ApiDeleteSpacePropertyByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteSpacePropertyByIdExecute(r)
}

/*
DeleteSpacePropertyById Delete space property by id

Deletes a space property by its id.

**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
Permission to access the Confluence site ('Can use' global permission) and 'Admin' permission for the space.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param spaceId The ID of the space the property belongs to.
	@param propertyId The ID of the property to be deleted.
	@return ApiDeleteSpacePropertyByIdRequest
*/
func (a *SpacePropertiesApiService) DeleteSpacePropertyById(ctx context.Context, spaceId int64, propertyId int64) ApiDeleteSpacePropertyByIdRequest {
	return ApiDeleteSpacePropertyByIdRequest{
		ApiService: a,
		ctx:        ctx,
		spaceId:    spaceId,
		propertyId: propertyId,
	}
}

// Execute executes the request
func (a *SpacePropertiesApiService) DeleteSpacePropertyByIdExecute(r ApiDeleteSpacePropertyByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SpacePropertiesApiService.DeleteSpacePropertyById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/spaces/{space-id}/properties/{property-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"space-id"+"}", url.PathEscape(parameterValueToString(r.spaceId, "spaceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"property-id"+"}", url.PathEscape(parameterValueToString(r.propertyId, "propertyId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetSpacePropertiesRequest struct {
	ctx                   context.Context
	ApiService            SpacePropertiesApi
	spaceId               int64
	key                   *string
	cursor                *string
	limit                 *int32
	serializeIdsAsStrings *bool
}

// The key of the space property to retrieve. This should be used when a user knows the key of their property, but needs to retrieve the id for use in other methods.
func (r ApiGetSpacePropertiesRequest) Key(key string) ApiGetSpacePropertiesRequest {
	r.key = &key
	return r
}

// Used for pagination, this opaque cursor will be returned in the &#x60;next&#x60; URL in the &#x60;Link&#x60; response header. Use the relative URL in the &#x60;Link&#x60; header to retrieve the &#x60;next&#x60; set of results.
func (r ApiGetSpacePropertiesRequest) Cursor(cursor string) ApiGetSpacePropertiesRequest {
	r.cursor = &cursor
	return r
}

// Maximum number of pages per result to return. If more results exist, use the &#x60;Link&#x60; header to retrieve a relative URL that will return the next set of results.
func (r ApiGetSpacePropertiesRequest) Limit(limit int32) ApiGetSpacePropertiesRequest {
	r.limit = &limit
	return r
}

// Due to JavaScript&#39;s max integer representation of 2^53-1, the type of any IDs returned in the response body for this endpoint will be changed from a numeric type to a string type at the end of the deprecation period. In the meantime, this query param can be passed to this endpoint to opt-in to this change now. See this [changelog](https://developer.atlassian.com/cloud/confluence/changelog/#CHANGE-905) for more detail.
func (r ApiGetSpacePropertiesRequest) SerializeIdsAsStrings(serializeIdsAsStrings bool) ApiGetSpacePropertiesRequest {
	r.serializeIdsAsStrings = &serializeIdsAsStrings
	return r
}

func (r ApiGetSpacePropertiesRequest) Execute() (*MultiEntityResultSpaceProperty, *http.Response, error) {
	return r.ApiService.GetSpacePropertiesExecute(r)
}

/*
GetSpaceProperties Get space properties in space

Returns all properties for the given space. Space properties are a key-value storage associated with a space.
The limit parameter specifies the maximum number of results returned in a single response. Use the `link` response header
to paginate through additional results.

**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
Permission to access the Confluence site ('Can use' global permission) and 'View' permission for the space.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param spaceId The ID of the space for which space properties should be returned.
	@return ApiGetSpacePropertiesRequest
*/
func (a *SpacePropertiesApiService) GetSpaceProperties(ctx context.Context, spaceId int64) ApiGetSpacePropertiesRequest {
	return ApiGetSpacePropertiesRequest{
		ApiService: a,
		ctx:        ctx,
		spaceId:    spaceId,
	}
}

// Execute executes the request
//
//	@return MultiEntityResultSpaceProperty
func (a *SpacePropertiesApiService) GetSpacePropertiesExecute(r ApiGetSpacePropertiesRequest) (*MultiEntityResultSpaceProperty, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *MultiEntityResultSpaceProperty
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SpacePropertiesApiService.GetSpaceProperties")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/spaces/{space-id}/properties"
	localVarPath = strings.Replace(localVarPath, "{"+"space-id"+"}", url.PathEscape(parameterValueToString(r.spaceId, "spaceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.key != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "key", r.key, "")
	}
	if r.cursor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cursor", r.cursor, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.serializeIdsAsStrings != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "serialize-ids-as-strings", r.serializeIdsAsStrings, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSpacePropertyByIdRequest struct {
	ctx                   context.Context
	ApiService            SpacePropertiesApi
	spaceId               int64
	propertyId            int64
	serializeIdsAsStrings *bool
}

// Due to JavaScript&#39;s max integer representation of 2^53-1, the type of any IDs returned in the response body for this endpoint will be changed from a numeric type to a string type at the end of the deprecation period. In the meantime, this query param can be passed to this endpoint to opt-in to this change now. See this [changelog](https://developer.atlassian.com/cloud/confluence/changelog/#CHANGE-905) for more detail.
func (r ApiGetSpacePropertyByIdRequest) SerializeIdsAsStrings(serializeIdsAsStrings bool) ApiGetSpacePropertyByIdRequest {
	r.serializeIdsAsStrings = &serializeIdsAsStrings
	return r
}

func (r ApiGetSpacePropertyByIdRequest) Execute() (*SpaceProperty, *http.Response, error) {
	return r.ApiService.GetSpacePropertyByIdExecute(r)
}

/*
GetSpacePropertyById Get space property by id

Retrieve a space property by its id.

**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
Permission to access the Confluence site ('Can use' global permission) and 'View' permission for the space.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param spaceId The ID of the space the property belongs to.
	@param propertyId The ID of the property to be retrieved.
	@return ApiGetSpacePropertyByIdRequest
*/
func (a *SpacePropertiesApiService) GetSpacePropertyById(ctx context.Context, spaceId int64, propertyId int64) ApiGetSpacePropertyByIdRequest {
	return ApiGetSpacePropertyByIdRequest{
		ApiService: a,
		ctx:        ctx,
		spaceId:    spaceId,
		propertyId: propertyId,
	}
}

// Execute executes the request
//
//	@return SpaceProperty
func (a *SpacePropertiesApiService) GetSpacePropertyByIdExecute(r ApiGetSpacePropertyByIdRequest) (*SpaceProperty, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SpaceProperty
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SpacePropertiesApiService.GetSpacePropertyById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/spaces/{space-id}/properties/{property-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"space-id"+"}", url.PathEscape(parameterValueToString(r.spaceId, "spaceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"property-id"+"}", url.PathEscape(parameterValueToString(r.propertyId, "propertyId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.serializeIdsAsStrings != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "serialize-ids-as-strings", r.serializeIdsAsStrings, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateSpacePropertyByIdRequest struct {
	ctx                        context.Context
	ApiService                 SpacePropertiesApi
	spaceId                    int64
	propertyId                 int64
	spacePropertyUpdateRequest *SpacePropertyUpdateRequest
	serializeIdsAsStrings      *bool
}

// The space property to be updated.
func (r ApiUpdateSpacePropertyByIdRequest) SpacePropertyUpdateRequest(spacePropertyUpdateRequest SpacePropertyUpdateRequest) ApiUpdateSpacePropertyByIdRequest {
	r.spacePropertyUpdateRequest = &spacePropertyUpdateRequest
	return r
}

// Due to JavaScript&#39;s max integer representation of 2^53-1, the type of any IDs returned in the response body for this endpoint will be changed from a numeric type to a string type at the end of the deprecation period. In the meantime, this query param can be passed to this endpoint to opt-in to this change now. See this [changelog](https://developer.atlassian.com/cloud/confluence/changelog/#CHANGE-905) for more detail.
func (r ApiUpdateSpacePropertyByIdRequest) SerializeIdsAsStrings(serializeIdsAsStrings bool) ApiUpdateSpacePropertyByIdRequest {
	r.serializeIdsAsStrings = &serializeIdsAsStrings
	return r
}

func (r ApiUpdateSpacePropertyByIdRequest) Execute() (*SpaceProperty, *http.Response, error) {
	return r.ApiService.UpdateSpacePropertyByIdExecute(r)
}

/*
UpdateSpacePropertyById Update space property by id

Update a space property by its id.

**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
Permission to access the Confluence site ('Can use' global permission) and 'Admin' permission for the space.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param spaceId The ID of the space the property belongs to.
	@param propertyId The ID of the property to be updated.
	@return ApiUpdateSpacePropertyByIdRequest
*/
func (a *SpacePropertiesApiService) UpdateSpacePropertyById(ctx context.Context, spaceId int64, propertyId int64) ApiUpdateSpacePropertyByIdRequest {
	return ApiUpdateSpacePropertyByIdRequest{
		ApiService: a,
		ctx:        ctx,
		spaceId:    spaceId,
		propertyId: propertyId,
	}
}

// Execute executes the request
//
//	@return SpaceProperty
func (a *SpacePropertiesApiService) UpdateSpacePropertyByIdExecute(r ApiUpdateSpacePropertyByIdRequest) (*SpaceProperty, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SpaceProperty
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SpacePropertiesApiService.UpdateSpacePropertyById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/spaces/{space-id}/properties/{property-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"space-id"+"}", url.PathEscape(parameterValueToString(r.spaceId, "spaceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"property-id"+"}", url.PathEscape(parameterValueToString(r.propertyId, "propertyId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.spacePropertyUpdateRequest == nil {
		return localVarReturnValue, nil, reportError("spacePropertyUpdateRequest is required and must be specified")
	}

	if r.serializeIdsAsStrings != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "serialize-ids-as-strings", r.serializeIdsAsStrings, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.spacePropertyUpdateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
