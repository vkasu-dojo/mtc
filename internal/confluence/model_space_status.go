/*
The Confluence Cloud REST API v2

This document describes Confluence's v2 APIs. This is intended to be an iteration on the existing Confluence Cloud REST API with improvements in both endpoint definitions and performance.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package confluence

import (
	"encoding/json"
	"fmt"
)

// SpaceStatus The status of the space.
type SpaceStatus string

// List of SpaceStatus
const (
	SPACESTATUS_CURRENT  SpaceStatus = "current"
	SPACESTATUS_ARCHIVED SpaceStatus = "archived"
)

// All allowed values of SpaceStatus enum
var AllowedSpaceStatusEnumValues = []SpaceStatus{
	"current",
	"archived",
}

func (v *SpaceStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SpaceStatus(value)
	for _, existing := range AllowedSpaceStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SpaceStatus", value)
}

// NewSpaceStatusFromValue returns a pointer to a valid SpaceStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSpaceStatusFromValue(v string) (*SpaceStatus, error) {
	ev := SpaceStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SpaceStatus: valid values are %v", v, AllowedSpaceStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SpaceStatus) IsValid() bool {
	for _, existing := range AllowedSpaceStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SpaceStatus value
func (v SpaceStatus) Ptr() *SpaceStatus {
	return &v
}

type NullableSpaceStatus struct {
	value *SpaceStatus
	isSet bool
}

func (v NullableSpaceStatus) Get() *SpaceStatus {
	return v.value
}

func (v *NullableSpaceStatus) Set(val *SpaceStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableSpaceStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableSpaceStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpaceStatus(val *SpaceStatus) *NullableSpaceStatus {
	return &NullableSpaceStatus{value: val, isSet: true}
}

func (v NullableSpaceStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpaceStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
