/*
The Confluence Cloud REST API v2

This document describes Confluence's v2 APIs. This is intended to be an iteration on the existing Confluence Cloud REST API with improvements in both endpoint definitions and performance.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package confluence

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

type AttachmentApi interface {

	/*
		GetAttachmentById Get attachment by id

		Returns a specific attachment.

	**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
	Permission to view the attachment's container.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param id The ID of the attachment to be returned. If you don't know the attachment's ID, use Get attachments for page/blogpost/custom content.
		@return ApiGetAttachmentByIdRequest
	*/
	GetAttachmentById(ctx context.Context, id string) ApiGetAttachmentByIdRequest

	// GetAttachmentByIdExecute executes the request
	//  @return Attachment
	GetAttachmentByIdExecute(r ApiGetAttachmentByIdRequest) (*Attachment, *http.Response, error)

	/*
		GetBlogpostAttachments Get attachments for blog post

		Returns the attachments of specific blog post. The number of results is limited by the `limit` parameter and additional results (if available)
	will be available through the `next` URL present in the `Link` response header.

	**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
	Permission to view the content of the blog post and its corresponding space.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param id The ID of the blog post for which attachments should be returned.
		@return ApiGetBlogpostAttachmentsRequest
	*/
	GetBlogpostAttachments(ctx context.Context, id int64) ApiGetBlogpostAttachmentsRequest

	// GetBlogpostAttachmentsExecute executes the request
	//  @return MultiEntityResultAttachment
	GetBlogpostAttachmentsExecute(r ApiGetBlogpostAttachmentsRequest) (*MultiEntityResultAttachment, *http.Response, error)

	/*
		GetCustomContentAttachments Get attachments for custom content

		Returns the attachments of specific custom content. The number of results is limited by the `limit` parameter and additional results (if available)
	will be available through the `next` URL present in the `Link` response header.

	**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
	Permission to view the content of the custom content and its corresponding space.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param id The ID of the custom content for which attachments should be returned.
		@return ApiGetCustomContentAttachmentsRequest
	*/
	GetCustomContentAttachments(ctx context.Context, id int64) ApiGetCustomContentAttachmentsRequest

	// GetCustomContentAttachmentsExecute executes the request
	//  @return MultiEntityResultAttachment
	GetCustomContentAttachmentsExecute(r ApiGetCustomContentAttachmentsRequest) (*MultiEntityResultAttachment, *http.Response, error)

	/*
		GetLabelAttachments Get attachments for label

		Returns the attachments of specified label. The number of results is limited by the `limit` parameter and additional results (if available)
	will be available through the `next` URL present in the `Link` response header.

	**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
	Permission to view the attachment and its corresponding space.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param id The ID of the label for which attachments should be returned.
		@return ApiGetLabelAttachmentsRequest
	*/
	GetLabelAttachments(ctx context.Context, id int64) ApiGetLabelAttachmentsRequest

	// GetLabelAttachmentsExecute executes the request
	//  @return MultiEntityResultAttachment1
	GetLabelAttachmentsExecute(r ApiGetLabelAttachmentsRequest) (*MultiEntityResultAttachment1, *http.Response, error)

	/*
		GetPageAttachments Get attachments for page

		Returns the attachments of specific page. The number of results is limited by the `limit` parameter and additional results (if available)
	will be available through the `next` URL present in the `Link` response header.

	**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
	Permission to view the content of the page and its corresponding space.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param id The ID of the page for which attachments should be returned.
		@return ApiGetPageAttachmentsRequest
	*/
	GetPageAttachments(ctx context.Context, id int64) ApiGetPageAttachmentsRequest

	// GetPageAttachmentsExecute executes the request
	//  @return MultiEntityResultAttachment
	GetPageAttachmentsExecute(r ApiGetPageAttachmentsRequest) (*MultiEntityResultAttachment, *http.Response, error)
}

// AttachmentApiService AttachmentApi service
type AttachmentApiService service

type ApiGetAttachmentByIdRequest struct {
	ctx                   context.Context
	ApiService            AttachmentApi
	id                    string
	version               *int32
	serializeIdsAsStrings *bool
}

// Allows you to retrieve a previously published version. Specify the previous version&#39;s number to retrieve its details.
func (r ApiGetAttachmentByIdRequest) Version(version int32) ApiGetAttachmentByIdRequest {
	r.version = &version
	return r
}

// Due to JavaScript&#39;s max integer representation of 2^53-1, the type of any IDs returned in the response body for this endpoint will be changed from a numeric type to a string type at the end of the deprecation period. In the meantime, this query param can be passed to this endpoint to opt-in to this change now. See this [changelog](https://developer.atlassian.com/cloud/confluence/changelog/#CHANGE-905) for more detail.
func (r ApiGetAttachmentByIdRequest) SerializeIdsAsStrings(serializeIdsAsStrings bool) ApiGetAttachmentByIdRequest {
	r.serializeIdsAsStrings = &serializeIdsAsStrings
	return r
}

func (r ApiGetAttachmentByIdRequest) Execute() (*Attachment, *http.Response, error) {
	return r.ApiService.GetAttachmentByIdExecute(r)
}

/*
GetAttachmentById Get attachment by id

Returns a specific attachment.

**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
Permission to view the attachment's container.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id The ID of the attachment to be returned. If you don't know the attachment's ID, use Get attachments for page/blogpost/custom content.
	@return ApiGetAttachmentByIdRequest
*/
func (a *AttachmentApiService) GetAttachmentById(ctx context.Context, id string) ApiGetAttachmentByIdRequest {
	return ApiGetAttachmentByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Attachment
func (a *AttachmentApiService) GetAttachmentByIdExecute(r ApiGetAttachmentByIdRequest) (*Attachment, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Attachment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AttachmentApiService.GetAttachmentById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/attachments/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.version != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "version", r.version, "")
	}
	if r.serializeIdsAsStrings != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "serialize-ids-as-strings", r.serializeIdsAsStrings, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetBlogpostAttachmentsRequest struct {
	ctx                   context.Context
	ApiService            AttachmentApi
	id                    int64
	sort                  *AttachmentSortOrder
	cursor                *string
	mediaType             *string
	filename              *string
	limit                 *int32
	serializeIdsAsStrings *bool
}

// Used to sort the result by a particular field.
func (r ApiGetBlogpostAttachmentsRequest) Sort(sort AttachmentSortOrder) ApiGetBlogpostAttachmentsRequest {
	r.sort = &sort
	return r
}

// Used for pagination, this opaque cursor will be returned in the &#x60;next&#x60; URL in the &#x60;Link&#x60; response header. Use the relative URL in the &#x60;Link&#x60; header to retrieve the &#x60;next&#x60; set of results.
func (r ApiGetBlogpostAttachmentsRequest) Cursor(cursor string) ApiGetBlogpostAttachmentsRequest {
	r.cursor = &cursor
	return r
}

// Filters on the mediaType of attachments. Only one may be specified.
func (r ApiGetBlogpostAttachmentsRequest) MediaType(mediaType string) ApiGetBlogpostAttachmentsRequest {
	r.mediaType = &mediaType
	return r
}

// Filters on the file-name of attachments. Only one may be specified.
func (r ApiGetBlogpostAttachmentsRequest) Filename(filename string) ApiGetBlogpostAttachmentsRequest {
	r.filename = &filename
	return r
}

// Maximum number of attachments per result to return. If more results exist, use the &#x60;Link&#x60; header to retrieve a relative URL that will return the next set of results.
func (r ApiGetBlogpostAttachmentsRequest) Limit(limit int32) ApiGetBlogpostAttachmentsRequest {
	r.limit = &limit
	return r
}

// Due to JavaScript&#39;s max integer representation of 2^53-1, the type of any IDs returned in the response body for this endpoint will be changed from a numeric type to a string type at the end of the deprecation period. In the meantime, this query param can be passed to this endpoint to opt-in to this change now. See this [changelog](https://developer.atlassian.com/cloud/confluence/changelog/#CHANGE-905) for more detail.
func (r ApiGetBlogpostAttachmentsRequest) SerializeIdsAsStrings(serializeIdsAsStrings bool) ApiGetBlogpostAttachmentsRequest {
	r.serializeIdsAsStrings = &serializeIdsAsStrings
	return r
}

func (r ApiGetBlogpostAttachmentsRequest) Execute() (*MultiEntityResultAttachment, *http.Response, error) {
	return r.ApiService.GetBlogpostAttachmentsExecute(r)
}

/*
GetBlogpostAttachments Get attachments for blog post

Returns the attachments of specific blog post. The number of results is limited by the `limit` parameter and additional results (if available)
will be available through the `next` URL present in the `Link` response header.

**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
Permission to view the content of the blog post and its corresponding space.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id The ID of the blog post for which attachments should be returned.
	@return ApiGetBlogpostAttachmentsRequest
*/
func (a *AttachmentApiService) GetBlogpostAttachments(ctx context.Context, id int64) ApiGetBlogpostAttachmentsRequest {
	return ApiGetBlogpostAttachmentsRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return MultiEntityResultAttachment
func (a *AttachmentApiService) GetBlogpostAttachmentsExecute(r ApiGetBlogpostAttachmentsRequest) (*MultiEntityResultAttachment, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *MultiEntityResultAttachment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AttachmentApiService.GetBlogpostAttachments")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/blogposts/{id}/attachments"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "")
	}
	if r.cursor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cursor", r.cursor, "")
	}
	if r.mediaType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "mediaType", r.mediaType, "")
	}
	if r.filename != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filename", r.filename, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.serializeIdsAsStrings != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "serialize-ids-as-strings", r.serializeIdsAsStrings, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCustomContentAttachmentsRequest struct {
	ctx                   context.Context
	ApiService            AttachmentApi
	id                    int64
	sort                  *AttachmentSortOrder
	cursor                *string
	mediaType             *string
	filename              *string
	limit                 *int32
	serializeIdsAsStrings *bool
}

// Used to sort the result by a particular field.
func (r ApiGetCustomContentAttachmentsRequest) Sort(sort AttachmentSortOrder) ApiGetCustomContentAttachmentsRequest {
	r.sort = &sort
	return r
}

// Used for pagination, this opaque cursor will be returned in the &#x60;next&#x60; URL in the &#x60;Link&#x60; response header. Use the relative URL in the &#x60;Link&#x60; header to retrieve the &#x60;next&#x60; set of results.
func (r ApiGetCustomContentAttachmentsRequest) Cursor(cursor string) ApiGetCustomContentAttachmentsRequest {
	r.cursor = &cursor
	return r
}

// Filters on the mediaType of attachments. Only one may be specified.
func (r ApiGetCustomContentAttachmentsRequest) MediaType(mediaType string) ApiGetCustomContentAttachmentsRequest {
	r.mediaType = &mediaType
	return r
}

// Filters on the file-name of attachments. Only one may be specified.
func (r ApiGetCustomContentAttachmentsRequest) Filename(filename string) ApiGetCustomContentAttachmentsRequest {
	r.filename = &filename
	return r
}

// Maximum number of attachments per result to return. If more results exist, use the &#x60;Link&#x60; header to retrieve a relative URL that will return the next set of results.
func (r ApiGetCustomContentAttachmentsRequest) Limit(limit int32) ApiGetCustomContentAttachmentsRequest {
	r.limit = &limit
	return r
}

// Due to JavaScript&#39;s max integer representation of 2^53-1, the type of any IDs returned in the response body for this endpoint will be changed from a numeric type to a string type at the end of the deprecation period. In the meantime, this query param can be passed to this endpoint to opt-in to this change now. See this [changelog](https://developer.atlassian.com/cloud/confluence/changelog/#CHANGE-905) for more detail.
func (r ApiGetCustomContentAttachmentsRequest) SerializeIdsAsStrings(serializeIdsAsStrings bool) ApiGetCustomContentAttachmentsRequest {
	r.serializeIdsAsStrings = &serializeIdsAsStrings
	return r
}

func (r ApiGetCustomContentAttachmentsRequest) Execute() (*MultiEntityResultAttachment, *http.Response, error) {
	return r.ApiService.GetCustomContentAttachmentsExecute(r)
}

/*
GetCustomContentAttachments Get attachments for custom content

Returns the attachments of specific custom content. The number of results is limited by the `limit` parameter and additional results (if available)
will be available through the `next` URL present in the `Link` response header.

**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
Permission to view the content of the custom content and its corresponding space.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id The ID of the custom content for which attachments should be returned.
	@return ApiGetCustomContentAttachmentsRequest
*/
func (a *AttachmentApiService) GetCustomContentAttachments(ctx context.Context, id int64) ApiGetCustomContentAttachmentsRequest {
	return ApiGetCustomContentAttachmentsRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return MultiEntityResultAttachment
func (a *AttachmentApiService) GetCustomContentAttachmentsExecute(r ApiGetCustomContentAttachmentsRequest) (*MultiEntityResultAttachment, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *MultiEntityResultAttachment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AttachmentApiService.GetCustomContentAttachments")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/custom-content/{id}/attachments"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "")
	}
	if r.cursor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cursor", r.cursor, "")
	}
	if r.mediaType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "mediaType", r.mediaType, "")
	}
	if r.filename != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filename", r.filename, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.serializeIdsAsStrings != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "serialize-ids-as-strings", r.serializeIdsAsStrings, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetLabelAttachmentsRequest struct {
	ctx                   context.Context
	ApiService            AttachmentApi
	id                    int64
	sort                  *AttachmentSortOrder
	cursor                *string
	limit                 *int32
	serializeIdsAsStrings *bool
}

// Used to sort the result by a particular field.
func (r ApiGetLabelAttachmentsRequest) Sort(sort AttachmentSortOrder) ApiGetLabelAttachmentsRequest {
	r.sort = &sort
	return r
}

// Used for pagination, this opaque cursor will be returned in the &#x60;next&#x60; URL in the &#x60;Link&#x60; response header. Use the relative URL in the &#x60;Link&#x60; header to retrieve the &#x60;next&#x60; set of results.
func (r ApiGetLabelAttachmentsRequest) Cursor(cursor string) ApiGetLabelAttachmentsRequest {
	r.cursor = &cursor
	return r
}

// Maximum number of pages per result to return. If more results exist, use the &#x60;Link&#x60; header to retrieve a relative URL that will return the next set of results.
func (r ApiGetLabelAttachmentsRequest) Limit(limit int32) ApiGetLabelAttachmentsRequest {
	r.limit = &limit
	return r
}

// Due to JavaScript&#39;s max integer representation of 2^53-1, the type of any IDs returned in the response body for this endpoint will be changed from a numeric type to a string type at the end of the deprecation period. In the meantime, this query param can be passed to this endpoint to opt-in to this change now. See this [changelog](https://developer.atlassian.com/cloud/confluence/changelog/#CHANGE-905) for more detail.
func (r ApiGetLabelAttachmentsRequest) SerializeIdsAsStrings(serializeIdsAsStrings bool) ApiGetLabelAttachmentsRequest {
	r.serializeIdsAsStrings = &serializeIdsAsStrings
	return r
}

func (r ApiGetLabelAttachmentsRequest) Execute() (*MultiEntityResultAttachment1, *http.Response, error) {
	return r.ApiService.GetLabelAttachmentsExecute(r)
}

/*
GetLabelAttachments Get attachments for label

Returns the attachments of specified label. The number of results is limited by the `limit` parameter and additional results (if available)
will be available through the `next` URL present in the `Link` response header.

**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
Permission to view the attachment and its corresponding space.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id The ID of the label for which attachments should be returned.
	@return ApiGetLabelAttachmentsRequest
*/
func (a *AttachmentApiService) GetLabelAttachments(ctx context.Context, id int64) ApiGetLabelAttachmentsRequest {
	return ApiGetLabelAttachmentsRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return MultiEntityResultAttachment1
func (a *AttachmentApiService) GetLabelAttachmentsExecute(r ApiGetLabelAttachmentsRequest) (*MultiEntityResultAttachment1, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *MultiEntityResultAttachment1
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AttachmentApiService.GetLabelAttachments")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/labels/{id}/attachments"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "")
	}
	if r.cursor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cursor", r.cursor, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.serializeIdsAsStrings != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "serialize-ids-as-strings", r.serializeIdsAsStrings, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetPageAttachmentsRequest struct {
	ctx                   context.Context
	ApiService            AttachmentApi
	id                    int64
	sort                  *AttachmentSortOrder
	cursor                *string
	mediaType             *string
	filename              *string
	limit                 *int32
	serializeIdsAsStrings *bool
}

// Used to sort the result by a particular field.
func (r ApiGetPageAttachmentsRequest) Sort(sort AttachmentSortOrder) ApiGetPageAttachmentsRequest {
	r.sort = &sort
	return r
}

// Used for pagination, this opaque cursor will be returned in the &#x60;next&#x60; URL in the &#x60;Link&#x60; response header. Use the relative URL in the &#x60;Link&#x60; header to retrieve the &#x60;next&#x60; set of results.
func (r ApiGetPageAttachmentsRequest) Cursor(cursor string) ApiGetPageAttachmentsRequest {
	r.cursor = &cursor
	return r
}

// Filters on the mediaType of attachments. Only one may be specified.
func (r ApiGetPageAttachmentsRequest) MediaType(mediaType string) ApiGetPageAttachmentsRequest {
	r.mediaType = &mediaType
	return r
}

// Filters on the file-name of attachments. Only one may be specified.
func (r ApiGetPageAttachmentsRequest) Filename(filename string) ApiGetPageAttachmentsRequest {
	r.filename = &filename
	return r
}

// Maximum number of attachments per result to return. If more results exist, use the &#x60;Link&#x60; header to retrieve a relative URL that will return the next set of results.
func (r ApiGetPageAttachmentsRequest) Limit(limit int32) ApiGetPageAttachmentsRequest {
	r.limit = &limit
	return r
}

// Due to JavaScript&#39;s max integer representation of 2^53-1, the type of any IDs returned in the response body for this endpoint will be changed from a numeric type to a string type at the end of the deprecation period. In the meantime, this query param can be passed to this endpoint to opt-in to this change now. See this [changelog](https://developer.atlassian.com/cloud/confluence/changelog/#CHANGE-905) for more detail.
func (r ApiGetPageAttachmentsRequest) SerializeIdsAsStrings(serializeIdsAsStrings bool) ApiGetPageAttachmentsRequest {
	r.serializeIdsAsStrings = &serializeIdsAsStrings
	return r
}

func (r ApiGetPageAttachmentsRequest) Execute() (*MultiEntityResultAttachment, *http.Response, error) {
	return r.ApiService.GetPageAttachmentsExecute(r)
}

/*
GetPageAttachments Get attachments for page

Returns the attachments of specific page. The number of results is limited by the `limit` parameter and additional results (if available)
will be available through the `next` URL present in the `Link` response header.

**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
Permission to view the content of the page and its corresponding space.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id The ID of the page for which attachments should be returned.
	@return ApiGetPageAttachmentsRequest
*/
func (a *AttachmentApiService) GetPageAttachments(ctx context.Context, id int64) ApiGetPageAttachmentsRequest {
	return ApiGetPageAttachmentsRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return MultiEntityResultAttachment
func (a *AttachmentApiService) GetPageAttachmentsExecute(r ApiGetPageAttachmentsRequest) (*MultiEntityResultAttachment, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *MultiEntityResultAttachment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AttachmentApiService.GetPageAttachments")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pages/{id}/attachments"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "")
	}
	if r.cursor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cursor", r.cursor, "")
	}
	if r.mediaType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "mediaType", r.mediaType, "")
	}
	if r.filename != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filename", r.filename, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.serializeIdsAsStrings != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "serialize-ids-as-strings", r.serializeIdsAsStrings, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
