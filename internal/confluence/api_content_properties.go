/*
The Confluence Cloud REST API v2

This document describes Confluence's v2 APIs. This is intended to be an iteration on the existing Confluence Cloud REST API with improvements in both endpoint definitions and performance.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package confluence

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

type ContentPropertiesApi interface {

	/*
		CreateAttachmentProperty Create attachment property

		Creates a new attachment property.

	**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
	Permission to update the attachment.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param attachmentId The ID of the attachment to create a property for.
		@return ApiCreateAttachmentPropertyRequest
	*/
	CreateAttachmentProperty(ctx context.Context, attachmentId string) ApiCreateAttachmentPropertyRequest

	// CreateAttachmentPropertyExecute executes the request
	//  @return ContentProperty
	CreateAttachmentPropertyExecute(r ApiCreateAttachmentPropertyRequest) (*ContentProperty, *http.Response, error)

	/*
		CreateBlogpostProperty Create blog post property

		Creates a new blog post property.

	**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
	Permission to update the blog post.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param blogpostId The ID of the blog post to create a property for.
		@return ApiCreateBlogpostPropertyRequest
	*/
	CreateBlogpostProperty(ctx context.Context, blogpostId int64) ApiCreateBlogpostPropertyRequest

	// CreateBlogpostPropertyExecute executes the request
	//  @return ContentProperty
	CreateBlogpostPropertyExecute(r ApiCreateBlogpostPropertyRequest) (*ContentProperty, *http.Response, error)

	/*
		CreateCommentProperty Create comment property

		Creates a new comment property.

	**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
	Permission to update the comment.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param commentId The ID of the comment to create a property for.
		@return ApiCreateCommentPropertyRequest
	*/
	CreateCommentProperty(ctx context.Context, commentId int64) ApiCreateCommentPropertyRequest

	// CreateCommentPropertyExecute executes the request
	//  @return ContentProperty
	CreateCommentPropertyExecute(r ApiCreateCommentPropertyRequest) (*ContentProperty, *http.Response, error)

	/*
		CreateCustomContentProperty Create custom content property

		Creates a new custom content property.

	**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
	Permission to update the custom content.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param customContentId The ID of the custom content to create a property for.
		@return ApiCreateCustomContentPropertyRequest
	*/
	CreateCustomContentProperty(ctx context.Context, customContentId int64) ApiCreateCustomContentPropertyRequest

	// CreateCustomContentPropertyExecute executes the request
	//  @return ContentProperty
	CreateCustomContentPropertyExecute(r ApiCreateCustomContentPropertyRequest) (*ContentProperty, *http.Response, error)

	/*
		CreatePageProperty Create page property

		Creates a new page property.

	**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
	Permission to update the page.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param pageId The ID of the page to create a property for.
		@return ApiCreatePagePropertyRequest
	*/
	CreatePageProperty(ctx context.Context, pageId int64) ApiCreatePagePropertyRequest

	// CreatePagePropertyExecute executes the request
	//  @return ContentProperty
	CreatePagePropertyExecute(r ApiCreatePagePropertyRequest) (*ContentProperty, *http.Response, error)

	/*
		DeleteAttachmentPropertyById Delete attachment property by id

		Deletes a attachment property by its id.

	**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
	Permission to attachment the page.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param attachmentId The ID of the attachment the property belongs to.
		@param propertyId The ID of the property to be deleted.
		@return ApiDeleteAttachmentPropertyByIdRequest
	*/
	DeleteAttachmentPropertyById(ctx context.Context, attachmentId string, propertyId int64) ApiDeleteAttachmentPropertyByIdRequest

	// DeleteAttachmentPropertyByIdExecute executes the request
	DeleteAttachmentPropertyByIdExecute(r ApiDeleteAttachmentPropertyByIdRequest) (*http.Response, error)

	/*
		DeleteBlogpostPropertyById Delete blog post property by id

		Deletes a blog post property by its id.

	**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
	Permission to edit the blog post.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param blogpostId The ID of the blog post the property belongs to.
		@param propertyId The ID of the property to be deleted.
		@return ApiDeleteBlogpostPropertyByIdRequest
	*/
	DeleteBlogpostPropertyById(ctx context.Context, blogpostId int64, propertyId int64) ApiDeleteBlogpostPropertyByIdRequest

	// DeleteBlogpostPropertyByIdExecute executes the request
	DeleteBlogpostPropertyByIdExecute(r ApiDeleteBlogpostPropertyByIdRequest) (*http.Response, error)

	/*
		DeleteCommentPropertyById Delete comment property by id

		Deletes a comment property by its id.

	**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
	Permission to edit the comment.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param commentId The ID of the comment the property belongs to.
		@param propertyId The ID of the property to be deleted.
		@return ApiDeleteCommentPropertyByIdRequest
	*/
	DeleteCommentPropertyById(ctx context.Context, commentId int64, propertyId int64) ApiDeleteCommentPropertyByIdRequest

	// DeleteCommentPropertyByIdExecute executes the request
	DeleteCommentPropertyByIdExecute(r ApiDeleteCommentPropertyByIdRequest) (*http.Response, error)

	/*
		DeleteCustomContentPropertyById Delete custom content property by id

		Deletes a custom content property by its id.

	**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
	Permission to edit the custom content.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param customContentId The ID of the custom content the property belongs to.
		@param propertyId The ID of the property to be deleted.
		@return ApiDeleteCustomContentPropertyByIdRequest
	*/
	DeleteCustomContentPropertyById(ctx context.Context, customContentId int64, propertyId int64) ApiDeleteCustomContentPropertyByIdRequest

	// DeleteCustomContentPropertyByIdExecute executes the request
	DeleteCustomContentPropertyByIdExecute(r ApiDeleteCustomContentPropertyByIdRequest) (*http.Response, error)

	/*
		DeletePagePropertyById Delete page property by id

		Deletes a page property by its id.

	**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
	Permission to edit the page.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param pageId The ID of the page the property belongs to.
		@param propertyId The ID of the property to be deleted.
		@return ApiDeletePagePropertyByIdRequest
	*/
	DeletePagePropertyById(ctx context.Context, pageId int64, propertyId int64) ApiDeletePagePropertyByIdRequest

	// DeletePagePropertyByIdExecute executes the request
	DeletePagePropertyByIdExecute(r ApiDeletePagePropertyByIdRequest) (*http.Response, error)

	/*
		GetAttachmentContentProperties Get content properties for attachment

		Retrieves all Content Properties tied to a specified attachment.

	**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
	Permission to view the attachment.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param attachmentId The ID of the attachment for which content properties should be returned.
		@return ApiGetAttachmentContentPropertiesRequest
	*/
	GetAttachmentContentProperties(ctx context.Context, attachmentId string) ApiGetAttachmentContentPropertiesRequest

	// GetAttachmentContentPropertiesExecute executes the request
	//  @return MultiEntityResultContentProperty
	GetAttachmentContentPropertiesExecute(r ApiGetAttachmentContentPropertiesRequest) (*MultiEntityResultContentProperty, *http.Response, error)

	/*
		GetAttachmentContentPropertiesById Get content property for attachment by id

		Retrieves a specific Content Property by ID that is attached to a specified attachment.

	**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
	Permission to view the attachment.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param attachmentId The ID of the attachment for which content properties should be returned.
		@param propertyId The ID of the content property to be returned
		@return ApiGetAttachmentContentPropertiesByIdRequest
	*/
	GetAttachmentContentPropertiesById(ctx context.Context, attachmentId string, propertyId int64) ApiGetAttachmentContentPropertiesByIdRequest

	// GetAttachmentContentPropertiesByIdExecute executes the request
	//  @return ContentProperty
	GetAttachmentContentPropertiesByIdExecute(r ApiGetAttachmentContentPropertiesByIdRequest) (*ContentProperty, *http.Response, error)

	/*
		GetBlogpostContentProperties Get content properties for blog post

		Retrieves all Content Properties tied to a specified blog post.

	**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
	Permission to view the blog post.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param blogpostId The ID of the blog post for which content properties should be returned.
		@return ApiGetBlogpostContentPropertiesRequest
	*/
	GetBlogpostContentProperties(ctx context.Context, blogpostId int64) ApiGetBlogpostContentPropertiesRequest

	// GetBlogpostContentPropertiesExecute executes the request
	//  @return MultiEntityResultContentProperty
	GetBlogpostContentPropertiesExecute(r ApiGetBlogpostContentPropertiesRequest) (*MultiEntityResultContentProperty, *http.Response, error)

	/*
		GetBlogpostContentPropertiesById Get content property for blog post by id

		Retrieves a specific Content Property by ID that is attached to a specified blog post.

	**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
	Permission to view the blog post.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param blogpostId The ID of the blog post for which content properties should be returned.
		@param propertyId The ID of the property being requested
		@return ApiGetBlogpostContentPropertiesByIdRequest
	*/
	GetBlogpostContentPropertiesById(ctx context.Context, blogpostId int64, propertyId int64) ApiGetBlogpostContentPropertiesByIdRequest

	// GetBlogpostContentPropertiesByIdExecute executes the request
	//  @return ContentProperty
	GetBlogpostContentPropertiesByIdExecute(r ApiGetBlogpostContentPropertiesByIdRequest) (*ContentProperty, *http.Response, error)

	/*
		GetCommentContentProperties Get content properties for comment

		Retrieves Content Properties attached to a specified comment.

	**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
	Permission to view the comment.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param commentId The ID of the comment for which content properties should be returned.
		@return ApiGetCommentContentPropertiesRequest
	*/
	GetCommentContentProperties(ctx context.Context, commentId int64) ApiGetCommentContentPropertiesRequest

	// GetCommentContentPropertiesExecute executes the request
	//  @return MultiEntityResultContentProperty
	GetCommentContentPropertiesExecute(r ApiGetCommentContentPropertiesRequest) (*MultiEntityResultContentProperty, *http.Response, error)

	/*
		GetCommentContentPropertiesById Get content property for comment by id

		Retrieves a specific Content Property by ID that is attached to a specified comment.

	**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
	Permission to view the comment.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param commentId The ID of the comment for which content properties should be returned.
		@param propertyId The ID of the content property being requested.
		@return ApiGetCommentContentPropertiesByIdRequest
	*/
	GetCommentContentPropertiesById(ctx context.Context, commentId int64, propertyId int64) ApiGetCommentContentPropertiesByIdRequest

	// GetCommentContentPropertiesByIdExecute executes the request
	//  @return ContentProperty
	GetCommentContentPropertiesByIdExecute(r ApiGetCommentContentPropertiesByIdRequest) (*ContentProperty, *http.Response, error)

	/*
		GetCustomContentContentProperties Get content properties for custom content

		Retrieves Content Properties tied to a specified custom content.

	**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
	Permission to view the custom content.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param customContentId The ID of the custom content for which content properties should be returned.
		@return ApiGetCustomContentContentPropertiesRequest
	*/
	GetCustomContentContentProperties(ctx context.Context, customContentId int64) ApiGetCustomContentContentPropertiesRequest

	// GetCustomContentContentPropertiesExecute executes the request
	//  @return MultiEntityResultContentProperty
	GetCustomContentContentPropertiesExecute(r ApiGetCustomContentContentPropertiesRequest) (*MultiEntityResultContentProperty, *http.Response, error)

	/*
		GetCustomContentContentPropertiesById Get content property for custom content by id

		Retrieves a specific Content Property by ID that is attached to a specified custom content.

	**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
	Permission to view the page.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param customContentId The ID of the custom content for which content properties should be returned.
		@param propertyId The ID of the content property being requested.
		@return ApiGetCustomContentContentPropertiesByIdRequest
	*/
	GetCustomContentContentPropertiesById(ctx context.Context, customContentId int64, propertyId int64) ApiGetCustomContentContentPropertiesByIdRequest

	// GetCustomContentContentPropertiesByIdExecute executes the request
	//  @return ContentProperty
	GetCustomContentContentPropertiesByIdExecute(r ApiGetCustomContentContentPropertiesByIdRequest) (*ContentProperty, *http.Response, error)

	/*
		GetPageContentProperties Get content properties for page

		Retrieves Content Properties tied to a specified page.

	**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
	Permission to view the page.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param pageId The ID of the page for which content properties should be returned.
		@return ApiGetPageContentPropertiesRequest
	*/
	GetPageContentProperties(ctx context.Context, pageId int64) ApiGetPageContentPropertiesRequest

	// GetPageContentPropertiesExecute executes the request
	//  @return MultiEntityResultContentProperty
	GetPageContentPropertiesExecute(r ApiGetPageContentPropertiesRequest) (*MultiEntityResultContentProperty, *http.Response, error)

	/*
		GetPageContentPropertiesById Get content property for page by id

		Retrieves a specific Content Property by ID that is attached to a specified page.

	**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
	Permission to view the page.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param pageId The ID of the page for which content properties should be returned.
		@param propertyId The ID of the content property being requested.
		@return ApiGetPageContentPropertiesByIdRequest
	*/
	GetPageContentPropertiesById(ctx context.Context, pageId int64, propertyId int64) ApiGetPageContentPropertiesByIdRequest

	// GetPageContentPropertiesByIdExecute executes the request
	//  @return ContentProperty
	GetPageContentPropertiesByIdExecute(r ApiGetPageContentPropertiesByIdRequest) (*ContentProperty, *http.Response, error)

	/*
		UpdateAttachmentPropertyById Update attachment property by id

		Update an attachment property by its id.

	**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
	Permission to edit the attachment.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param attachmentId The ID of the attachment the property belongs to.
		@param propertyId The ID of the property to be updated.
		@return ApiUpdateAttachmentPropertyByIdRequest
	*/
	UpdateAttachmentPropertyById(ctx context.Context, attachmentId string, propertyId int64) ApiUpdateAttachmentPropertyByIdRequest

	// UpdateAttachmentPropertyByIdExecute executes the request
	//  @return ContentProperty
	UpdateAttachmentPropertyByIdExecute(r ApiUpdateAttachmentPropertyByIdRequest) (*ContentProperty, *http.Response, error)

	/*
		UpdateBlogpostPropertyById Update blog post property by id

		Update a blog post property by its id.

	**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
	Permission to edit the blog post.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param blogpostId The ID of the blog post the property belongs to.
		@param propertyId The ID of the property to be updated.
		@return ApiUpdateBlogpostPropertyByIdRequest
	*/
	UpdateBlogpostPropertyById(ctx context.Context, blogpostId int64, propertyId int64) ApiUpdateBlogpostPropertyByIdRequest

	// UpdateBlogpostPropertyByIdExecute executes the request
	//  @return ContentProperty
	UpdateBlogpostPropertyByIdExecute(r ApiUpdateBlogpostPropertyByIdRequest) (*ContentProperty, *http.Response, error)

	/*
		UpdateCommentPropertyById Update comment property by id

		Update a comment property by its id.

	**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
	Permission to edit the comment.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param commentId The ID of the comment the property belongs to.
		@param propertyId The ID of the property to be updated.
		@return ApiUpdateCommentPropertyByIdRequest
	*/
	UpdateCommentPropertyById(ctx context.Context, commentId int64, propertyId int64) ApiUpdateCommentPropertyByIdRequest

	// UpdateCommentPropertyByIdExecute executes the request
	//  @return ContentProperty
	UpdateCommentPropertyByIdExecute(r ApiUpdateCommentPropertyByIdRequest) (*ContentProperty, *http.Response, error)

	/*
		UpdateCustomContentPropertyById Update custom content property by id

		Update a custom content property by its id.

	**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
	Permission to edit the custom content.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param customContentId The ID of the custom content the property belongs to.
		@param propertyId The ID of the property to be updated.
		@return ApiUpdateCustomContentPropertyByIdRequest
	*/
	UpdateCustomContentPropertyById(ctx context.Context, customContentId int64, propertyId int64) ApiUpdateCustomContentPropertyByIdRequest

	// UpdateCustomContentPropertyByIdExecute executes the request
	//  @return ContentProperty
	UpdateCustomContentPropertyByIdExecute(r ApiUpdateCustomContentPropertyByIdRequest) (*ContentProperty, *http.Response, error)

	/*
		UpdatePagePropertyById Update page property by id

		Update a page property by its id.

	**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
	Permission to edit the page.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param pageId The ID of the page the property belongs to.
		@param propertyId The ID of the property to be updated.
		@return ApiUpdatePagePropertyByIdRequest
	*/
	UpdatePagePropertyById(ctx context.Context, pageId int64, propertyId int64) ApiUpdatePagePropertyByIdRequest

	// UpdatePagePropertyByIdExecute executes the request
	//  @return ContentProperty
	UpdatePagePropertyByIdExecute(r ApiUpdatePagePropertyByIdRequest) (*ContentProperty, *http.Response, error)
}

// ContentPropertiesApiService ContentPropertiesApi service
type ContentPropertiesApiService service

type ApiCreateAttachmentPropertyRequest struct {
	ctx                          context.Context
	ApiService                   ContentPropertiesApi
	attachmentId                 string
	contentPropertyCreateRequest *ContentPropertyCreateRequest
	serializeIdsAsStrings        *bool
}

// The attachment property to be created
func (r ApiCreateAttachmentPropertyRequest) ContentPropertyCreateRequest(contentPropertyCreateRequest ContentPropertyCreateRequest) ApiCreateAttachmentPropertyRequest {
	r.contentPropertyCreateRequest = &contentPropertyCreateRequest
	return r
}

// Due to JavaScript&#39;s max integer representation of 2^53-1, the type of any IDs returned in the response body for this endpoint will be changed from a numeric type to a string type at the end of the deprecation period. In the meantime, this query param can be passed to this endpoint to opt-in to this change now. See this [changelog](https://developer.atlassian.com/cloud/confluence/changelog/#CHANGE-905) for more detail.
func (r ApiCreateAttachmentPropertyRequest) SerializeIdsAsStrings(serializeIdsAsStrings bool) ApiCreateAttachmentPropertyRequest {
	r.serializeIdsAsStrings = &serializeIdsAsStrings
	return r
}

func (r ApiCreateAttachmentPropertyRequest) Execute() (*ContentProperty, *http.Response, error) {
	return r.ApiService.CreateAttachmentPropertyExecute(r)
}

/*
CreateAttachmentProperty Create attachment property

Creates a new attachment property.

**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
Permission to update the attachment.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param attachmentId The ID of the attachment to create a property for.
	@return ApiCreateAttachmentPropertyRequest
*/
func (a *ContentPropertiesApiService) CreateAttachmentProperty(ctx context.Context, attachmentId string) ApiCreateAttachmentPropertyRequest {
	return ApiCreateAttachmentPropertyRequest{
		ApiService:   a,
		ctx:          ctx,
		attachmentId: attachmentId,
	}
}

// Execute executes the request
//
//	@return ContentProperty
func (a *ContentPropertiesApiService) CreateAttachmentPropertyExecute(r ApiCreateAttachmentPropertyRequest) (*ContentProperty, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ContentProperty
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentPropertiesApiService.CreateAttachmentProperty")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/attachments/{attachment-id}/properties"
	localVarPath = strings.Replace(localVarPath, "{"+"attachment-id"+"}", url.PathEscape(parameterValueToString(r.attachmentId, "attachmentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.contentPropertyCreateRequest == nil {
		return localVarReturnValue, nil, reportError("contentPropertyCreateRequest is required and must be specified")
	}

	if r.serializeIdsAsStrings != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "serialize-ids-as-strings", r.serializeIdsAsStrings, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.contentPropertyCreateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateBlogpostPropertyRequest struct {
	ctx                          context.Context
	ApiService                   ContentPropertiesApi
	blogpostId                   int64
	contentPropertyCreateRequest *ContentPropertyCreateRequest
	serializeIdsAsStrings        *bool
}

// The blog post property to be created
func (r ApiCreateBlogpostPropertyRequest) ContentPropertyCreateRequest(contentPropertyCreateRequest ContentPropertyCreateRequest) ApiCreateBlogpostPropertyRequest {
	r.contentPropertyCreateRequest = &contentPropertyCreateRequest
	return r
}

// Due to JavaScript&#39;s max integer representation of 2^53-1, the type of any IDs returned in the response body for this endpoint will be changed from a numeric type to a string type at the end of the deprecation period. In the meantime, this query param can be passed to this endpoint to opt-in to this change now. See this [changelog](https://developer.atlassian.com/cloud/confluence/changelog/#CHANGE-905) for more detail.
func (r ApiCreateBlogpostPropertyRequest) SerializeIdsAsStrings(serializeIdsAsStrings bool) ApiCreateBlogpostPropertyRequest {
	r.serializeIdsAsStrings = &serializeIdsAsStrings
	return r
}

func (r ApiCreateBlogpostPropertyRequest) Execute() (*ContentProperty, *http.Response, error) {
	return r.ApiService.CreateBlogpostPropertyExecute(r)
}

/*
CreateBlogpostProperty Create blog post property

Creates a new blog post property.

**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
Permission to update the blog post.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param blogpostId The ID of the blog post to create a property for.
	@return ApiCreateBlogpostPropertyRequest
*/
func (a *ContentPropertiesApiService) CreateBlogpostProperty(ctx context.Context, blogpostId int64) ApiCreateBlogpostPropertyRequest {
	return ApiCreateBlogpostPropertyRequest{
		ApiService: a,
		ctx:        ctx,
		blogpostId: blogpostId,
	}
}

// Execute executes the request
//
//	@return ContentProperty
func (a *ContentPropertiesApiService) CreateBlogpostPropertyExecute(r ApiCreateBlogpostPropertyRequest) (*ContentProperty, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ContentProperty
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentPropertiesApiService.CreateBlogpostProperty")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/blogposts/{blogpost-id}/properties"
	localVarPath = strings.Replace(localVarPath, "{"+"blogpost-id"+"}", url.PathEscape(parameterValueToString(r.blogpostId, "blogpostId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.contentPropertyCreateRequest == nil {
		return localVarReturnValue, nil, reportError("contentPropertyCreateRequest is required and must be specified")
	}

	if r.serializeIdsAsStrings != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "serialize-ids-as-strings", r.serializeIdsAsStrings, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.contentPropertyCreateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateCommentPropertyRequest struct {
	ctx                          context.Context
	ApiService                   ContentPropertiesApi
	commentId                    int64
	contentPropertyCreateRequest *ContentPropertyCreateRequest
	serializeIdsAsStrings        *bool
}

// The comment property to be created
func (r ApiCreateCommentPropertyRequest) ContentPropertyCreateRequest(contentPropertyCreateRequest ContentPropertyCreateRequest) ApiCreateCommentPropertyRequest {
	r.contentPropertyCreateRequest = &contentPropertyCreateRequest
	return r
}

// Due to JavaScript&#39;s max integer representation of 2^53-1, the type of any IDs returned in the response body for this endpoint will be changed from a numeric type to a string type at the end of the deprecation period. In the meantime, this query param can be passed to this endpoint to opt-in to this change now. See this [changelog](https://developer.atlassian.com/cloud/confluence/changelog/#CHANGE-905) for more detail.
func (r ApiCreateCommentPropertyRequest) SerializeIdsAsStrings(serializeIdsAsStrings bool) ApiCreateCommentPropertyRequest {
	r.serializeIdsAsStrings = &serializeIdsAsStrings
	return r
}

func (r ApiCreateCommentPropertyRequest) Execute() (*ContentProperty, *http.Response, error) {
	return r.ApiService.CreateCommentPropertyExecute(r)
}

/*
CreateCommentProperty Create comment property

Creates a new comment property.

**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
Permission to update the comment.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param commentId The ID of the comment to create a property for.
	@return ApiCreateCommentPropertyRequest
*/
func (a *ContentPropertiesApiService) CreateCommentProperty(ctx context.Context, commentId int64) ApiCreateCommentPropertyRequest {
	return ApiCreateCommentPropertyRequest{
		ApiService: a,
		ctx:        ctx,
		commentId:  commentId,
	}
}

// Execute executes the request
//
//	@return ContentProperty
func (a *ContentPropertiesApiService) CreateCommentPropertyExecute(r ApiCreateCommentPropertyRequest) (*ContentProperty, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ContentProperty
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentPropertiesApiService.CreateCommentProperty")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/comments/{comment-id}/properties"
	localVarPath = strings.Replace(localVarPath, "{"+"comment-id"+"}", url.PathEscape(parameterValueToString(r.commentId, "commentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.contentPropertyCreateRequest == nil {
		return localVarReturnValue, nil, reportError("contentPropertyCreateRequest is required and must be specified")
	}

	if r.serializeIdsAsStrings != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "serialize-ids-as-strings", r.serializeIdsAsStrings, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.contentPropertyCreateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateCustomContentPropertyRequest struct {
	ctx                          context.Context
	ApiService                   ContentPropertiesApi
	customContentId              int64
	contentPropertyCreateRequest *ContentPropertyCreateRequest
	serializeIdsAsStrings        *bool
}

// The custom content property to be created
func (r ApiCreateCustomContentPropertyRequest) ContentPropertyCreateRequest(contentPropertyCreateRequest ContentPropertyCreateRequest) ApiCreateCustomContentPropertyRequest {
	r.contentPropertyCreateRequest = &contentPropertyCreateRequest
	return r
}

// Due to JavaScript&#39;s max integer representation of 2^53-1, the type of any IDs returned in the response body for this endpoint will be changed from a numeric type to a string type at the end of the deprecation period. In the meantime, this query param can be passed to this endpoint to opt-in to this change now. See this [changelog](https://developer.atlassian.com/cloud/confluence/changelog/#CHANGE-905) for more detail.
func (r ApiCreateCustomContentPropertyRequest) SerializeIdsAsStrings(serializeIdsAsStrings bool) ApiCreateCustomContentPropertyRequest {
	r.serializeIdsAsStrings = &serializeIdsAsStrings
	return r
}

func (r ApiCreateCustomContentPropertyRequest) Execute() (*ContentProperty, *http.Response, error) {
	return r.ApiService.CreateCustomContentPropertyExecute(r)
}

/*
CreateCustomContentProperty Create custom content property

Creates a new custom content property.

**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
Permission to update the custom content.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param customContentId The ID of the custom content to create a property for.
	@return ApiCreateCustomContentPropertyRequest
*/
func (a *ContentPropertiesApiService) CreateCustomContentProperty(ctx context.Context, customContentId int64) ApiCreateCustomContentPropertyRequest {
	return ApiCreateCustomContentPropertyRequest{
		ApiService:      a,
		ctx:             ctx,
		customContentId: customContentId,
	}
}

// Execute executes the request
//
//	@return ContentProperty
func (a *ContentPropertiesApiService) CreateCustomContentPropertyExecute(r ApiCreateCustomContentPropertyRequest) (*ContentProperty, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ContentProperty
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentPropertiesApiService.CreateCustomContentProperty")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/custom-content/{custom-content-id}/properties"
	localVarPath = strings.Replace(localVarPath, "{"+"custom-content-id"+"}", url.PathEscape(parameterValueToString(r.customContentId, "customContentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.contentPropertyCreateRequest == nil {
		return localVarReturnValue, nil, reportError("contentPropertyCreateRequest is required and must be specified")
	}

	if r.serializeIdsAsStrings != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "serialize-ids-as-strings", r.serializeIdsAsStrings, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.contentPropertyCreateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreatePagePropertyRequest struct {
	ctx                          context.Context
	ApiService                   ContentPropertiesApi
	pageId                       int64
	contentPropertyCreateRequest *ContentPropertyCreateRequest
	serializeIdsAsStrings        *bool
}

// The page property to be created
func (r ApiCreatePagePropertyRequest) ContentPropertyCreateRequest(contentPropertyCreateRequest ContentPropertyCreateRequest) ApiCreatePagePropertyRequest {
	r.contentPropertyCreateRequest = &contentPropertyCreateRequest
	return r
}

// Due to JavaScript&#39;s max integer representation of 2^53-1, the type of any IDs returned in the response body for this endpoint will be changed from a numeric type to a string type at the end of the deprecation period. In the meantime, this query param can be passed to this endpoint to opt-in to this change now. See this [changelog](https://developer.atlassian.com/cloud/confluence/changelog/#CHANGE-905) for more detail.
func (r ApiCreatePagePropertyRequest) SerializeIdsAsStrings(serializeIdsAsStrings bool) ApiCreatePagePropertyRequest {
	r.serializeIdsAsStrings = &serializeIdsAsStrings
	return r
}

func (r ApiCreatePagePropertyRequest) Execute() (*ContentProperty, *http.Response, error) {
	return r.ApiService.CreatePagePropertyExecute(r)
}

/*
CreatePageProperty Create page property

Creates a new page property.

**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
Permission to update the page.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param pageId The ID of the page to create a property for.
	@return ApiCreatePagePropertyRequest
*/
func (a *ContentPropertiesApiService) CreatePageProperty(ctx context.Context, pageId int64) ApiCreatePagePropertyRequest {
	return ApiCreatePagePropertyRequest{
		ApiService: a,
		ctx:        ctx,
		pageId:     pageId,
	}
}

// Execute executes the request
//
//	@return ContentProperty
func (a *ContentPropertiesApiService) CreatePagePropertyExecute(r ApiCreatePagePropertyRequest) (*ContentProperty, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ContentProperty
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentPropertiesApiService.CreatePageProperty")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pages/{page-id}/properties"
	localVarPath = strings.Replace(localVarPath, "{"+"page-id"+"}", url.PathEscape(parameterValueToString(r.pageId, "pageId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.contentPropertyCreateRequest == nil {
		return localVarReturnValue, nil, reportError("contentPropertyCreateRequest is required and must be specified")
	}

	if r.serializeIdsAsStrings != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "serialize-ids-as-strings", r.serializeIdsAsStrings, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.contentPropertyCreateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteAttachmentPropertyByIdRequest struct {
	ctx          context.Context
	ApiService   ContentPropertiesApi
	attachmentId string
	propertyId   int64
}

func (r ApiDeleteAttachmentPropertyByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteAttachmentPropertyByIdExecute(r)
}

/*
DeleteAttachmentPropertyById Delete attachment property by id

Deletes a attachment property by its id.

**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
Permission to attachment the page.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param attachmentId The ID of the attachment the property belongs to.
	@param propertyId The ID of the property to be deleted.
	@return ApiDeleteAttachmentPropertyByIdRequest
*/
func (a *ContentPropertiesApiService) DeleteAttachmentPropertyById(ctx context.Context, attachmentId string, propertyId int64) ApiDeleteAttachmentPropertyByIdRequest {
	return ApiDeleteAttachmentPropertyByIdRequest{
		ApiService:   a,
		ctx:          ctx,
		attachmentId: attachmentId,
		propertyId:   propertyId,
	}
}

// Execute executes the request
func (a *ContentPropertiesApiService) DeleteAttachmentPropertyByIdExecute(r ApiDeleteAttachmentPropertyByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentPropertiesApiService.DeleteAttachmentPropertyById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/attachments/{attachment-id}/properties/{property-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"attachment-id"+"}", url.PathEscape(parameterValueToString(r.attachmentId, "attachmentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"property-id"+"}", url.PathEscape(parameterValueToString(r.propertyId, "propertyId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteBlogpostPropertyByIdRequest struct {
	ctx        context.Context
	ApiService ContentPropertiesApi
	blogpostId int64
	propertyId int64
}

func (r ApiDeleteBlogpostPropertyByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteBlogpostPropertyByIdExecute(r)
}

/*
DeleteBlogpostPropertyById Delete blog post property by id

Deletes a blog post property by its id.

**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
Permission to edit the blog post.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param blogpostId The ID of the blog post the property belongs to.
	@param propertyId The ID of the property to be deleted.
	@return ApiDeleteBlogpostPropertyByIdRequest
*/
func (a *ContentPropertiesApiService) DeleteBlogpostPropertyById(ctx context.Context, blogpostId int64, propertyId int64) ApiDeleteBlogpostPropertyByIdRequest {
	return ApiDeleteBlogpostPropertyByIdRequest{
		ApiService: a,
		ctx:        ctx,
		blogpostId: blogpostId,
		propertyId: propertyId,
	}
}

// Execute executes the request
func (a *ContentPropertiesApiService) DeleteBlogpostPropertyByIdExecute(r ApiDeleteBlogpostPropertyByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentPropertiesApiService.DeleteBlogpostPropertyById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/blogposts/{blogpost-id}/properties/{property-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"blogpost-id"+"}", url.PathEscape(parameterValueToString(r.blogpostId, "blogpostId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"property-id"+"}", url.PathEscape(parameterValueToString(r.propertyId, "propertyId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteCommentPropertyByIdRequest struct {
	ctx        context.Context
	ApiService ContentPropertiesApi
	commentId  int64
	propertyId int64
}

func (r ApiDeleteCommentPropertyByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteCommentPropertyByIdExecute(r)
}

/*
DeleteCommentPropertyById Delete comment property by id

Deletes a comment property by its id.

**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
Permission to edit the comment.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param commentId The ID of the comment the property belongs to.
	@param propertyId The ID of the property to be deleted.
	@return ApiDeleteCommentPropertyByIdRequest
*/
func (a *ContentPropertiesApiService) DeleteCommentPropertyById(ctx context.Context, commentId int64, propertyId int64) ApiDeleteCommentPropertyByIdRequest {
	return ApiDeleteCommentPropertyByIdRequest{
		ApiService: a,
		ctx:        ctx,
		commentId:  commentId,
		propertyId: propertyId,
	}
}

// Execute executes the request
func (a *ContentPropertiesApiService) DeleteCommentPropertyByIdExecute(r ApiDeleteCommentPropertyByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentPropertiesApiService.DeleteCommentPropertyById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/comments/{comment-id}/properties/{property-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"comment-id"+"}", url.PathEscape(parameterValueToString(r.commentId, "commentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"property-id"+"}", url.PathEscape(parameterValueToString(r.propertyId, "propertyId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteCustomContentPropertyByIdRequest struct {
	ctx             context.Context
	ApiService      ContentPropertiesApi
	customContentId int64
	propertyId      int64
}

func (r ApiDeleteCustomContentPropertyByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteCustomContentPropertyByIdExecute(r)
}

/*
DeleteCustomContentPropertyById Delete custom content property by id

Deletes a custom content property by its id.

**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
Permission to edit the custom content.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param customContentId The ID of the custom content the property belongs to.
	@param propertyId The ID of the property to be deleted.
	@return ApiDeleteCustomContentPropertyByIdRequest
*/
func (a *ContentPropertiesApiService) DeleteCustomContentPropertyById(ctx context.Context, customContentId int64, propertyId int64) ApiDeleteCustomContentPropertyByIdRequest {
	return ApiDeleteCustomContentPropertyByIdRequest{
		ApiService:      a,
		ctx:             ctx,
		customContentId: customContentId,
		propertyId:      propertyId,
	}
}

// Execute executes the request
func (a *ContentPropertiesApiService) DeleteCustomContentPropertyByIdExecute(r ApiDeleteCustomContentPropertyByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentPropertiesApiService.DeleteCustomContentPropertyById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/custom-content/{custom-content-id}/properties/{property-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"custom-content-id"+"}", url.PathEscape(parameterValueToString(r.customContentId, "customContentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"property-id"+"}", url.PathEscape(parameterValueToString(r.propertyId, "propertyId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeletePagePropertyByIdRequest struct {
	ctx        context.Context
	ApiService ContentPropertiesApi
	pageId     int64
	propertyId int64
}

func (r ApiDeletePagePropertyByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeletePagePropertyByIdExecute(r)
}

/*
DeletePagePropertyById Delete page property by id

Deletes a page property by its id.

**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
Permission to edit the page.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param pageId The ID of the page the property belongs to.
	@param propertyId The ID of the property to be deleted.
	@return ApiDeletePagePropertyByIdRequest
*/
func (a *ContentPropertiesApiService) DeletePagePropertyById(ctx context.Context, pageId int64, propertyId int64) ApiDeletePagePropertyByIdRequest {
	return ApiDeletePagePropertyByIdRequest{
		ApiService: a,
		ctx:        ctx,
		pageId:     pageId,
		propertyId: propertyId,
	}
}

// Execute executes the request
func (a *ContentPropertiesApiService) DeletePagePropertyByIdExecute(r ApiDeletePagePropertyByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentPropertiesApiService.DeletePagePropertyById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pages/{page-id}/properties/{property-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"page-id"+"}", url.PathEscape(parameterValueToString(r.pageId, "pageId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"property-id"+"}", url.PathEscape(parameterValueToString(r.propertyId, "propertyId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetAttachmentContentPropertiesRequest struct {
	ctx                   context.Context
	ApiService            ContentPropertiesApi
	attachmentId          string
	key                   *string
	sort                  *ContentPropertySortOrder
	cursor                *string
	limit                 *int32
	serializeIdsAsStrings *bool
}

// Filters the response to return a specific content property with matching key (case sensitive).
func (r ApiGetAttachmentContentPropertiesRequest) Key(key string) ApiGetAttachmentContentPropertiesRequest {
	r.key = &key
	return r
}

// Used to sort the result by a particular field.
func (r ApiGetAttachmentContentPropertiesRequest) Sort(sort ContentPropertySortOrder) ApiGetAttachmentContentPropertiesRequest {
	r.sort = &sort
	return r
}

// Used for pagination, this opaque cursor will be returned in the &#x60;next&#x60; URL in the &#x60;Link&#x60; response header. Use the relative URL in the &#x60;Link&#x60; header to retrieve the &#x60;next&#x60; set of results.
func (r ApiGetAttachmentContentPropertiesRequest) Cursor(cursor string) ApiGetAttachmentContentPropertiesRequest {
	r.cursor = &cursor
	return r
}

// Maximum number of attachments per result to return. If more results exist, use the &#x60;Link&#x60; header to retrieve a relative URL that will return the next set of results.
func (r ApiGetAttachmentContentPropertiesRequest) Limit(limit int32) ApiGetAttachmentContentPropertiesRequest {
	r.limit = &limit
	return r
}

// Due to JavaScript&#39;s max integer representation of 2^53-1, the type of any IDs returned in the response body for this endpoint will be changed from a numeric type to a string type at the end of the deprecation period. In the meantime, this query param can be passed to this endpoint to opt-in to this change now. See this [changelog](https://developer.atlassian.com/cloud/confluence/changelog/#CHANGE-905) for more detail.
func (r ApiGetAttachmentContentPropertiesRequest) SerializeIdsAsStrings(serializeIdsAsStrings bool) ApiGetAttachmentContentPropertiesRequest {
	r.serializeIdsAsStrings = &serializeIdsAsStrings
	return r
}

func (r ApiGetAttachmentContentPropertiesRequest) Execute() (*MultiEntityResultContentProperty, *http.Response, error) {
	return r.ApiService.GetAttachmentContentPropertiesExecute(r)
}

/*
GetAttachmentContentProperties Get content properties for attachment

Retrieves all Content Properties tied to a specified attachment.

**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
Permission to view the attachment.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param attachmentId The ID of the attachment for which content properties should be returned.
	@return ApiGetAttachmentContentPropertiesRequest
*/
func (a *ContentPropertiesApiService) GetAttachmentContentProperties(ctx context.Context, attachmentId string) ApiGetAttachmentContentPropertiesRequest {
	return ApiGetAttachmentContentPropertiesRequest{
		ApiService:   a,
		ctx:          ctx,
		attachmentId: attachmentId,
	}
}

// Execute executes the request
//
//	@return MultiEntityResultContentProperty
func (a *ContentPropertiesApiService) GetAttachmentContentPropertiesExecute(r ApiGetAttachmentContentPropertiesRequest) (*MultiEntityResultContentProperty, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *MultiEntityResultContentProperty
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentPropertiesApiService.GetAttachmentContentProperties")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/attachments/{attachment-id}/properties"
	localVarPath = strings.Replace(localVarPath, "{"+"attachment-id"+"}", url.PathEscape(parameterValueToString(r.attachmentId, "attachmentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.key != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "key", r.key, "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "")
	}
	if r.cursor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cursor", r.cursor, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.serializeIdsAsStrings != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "serialize-ids-as-strings", r.serializeIdsAsStrings, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetAttachmentContentPropertiesByIdRequest struct {
	ctx                   context.Context
	ApiService            ContentPropertiesApi
	attachmentId          string
	propertyId            int64
	serializeIdsAsStrings *bool
}

// Due to JavaScript&#39;s max integer representation of 2^53-1, the type of any IDs returned in the response body for this endpoint will be changed from a numeric type to a string type at the end of the deprecation period. In the meantime, this query param can be passed to this endpoint to opt-in to this change now. See this [changelog](https://developer.atlassian.com/cloud/confluence/changelog/#CHANGE-905) for more detail.
func (r ApiGetAttachmentContentPropertiesByIdRequest) SerializeIdsAsStrings(serializeIdsAsStrings bool) ApiGetAttachmentContentPropertiesByIdRequest {
	r.serializeIdsAsStrings = &serializeIdsAsStrings
	return r
}

func (r ApiGetAttachmentContentPropertiesByIdRequest) Execute() (*ContentProperty, *http.Response, error) {
	return r.ApiService.GetAttachmentContentPropertiesByIdExecute(r)
}

/*
GetAttachmentContentPropertiesById Get content property for attachment by id

Retrieves a specific Content Property by ID that is attached to a specified attachment.

**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
Permission to view the attachment.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param attachmentId The ID of the attachment for which content properties should be returned.
	@param propertyId The ID of the content property to be returned
	@return ApiGetAttachmentContentPropertiesByIdRequest
*/
func (a *ContentPropertiesApiService) GetAttachmentContentPropertiesById(ctx context.Context, attachmentId string, propertyId int64) ApiGetAttachmentContentPropertiesByIdRequest {
	return ApiGetAttachmentContentPropertiesByIdRequest{
		ApiService:   a,
		ctx:          ctx,
		attachmentId: attachmentId,
		propertyId:   propertyId,
	}
}

// Execute executes the request
//
//	@return ContentProperty
func (a *ContentPropertiesApiService) GetAttachmentContentPropertiesByIdExecute(r ApiGetAttachmentContentPropertiesByIdRequest) (*ContentProperty, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ContentProperty
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentPropertiesApiService.GetAttachmentContentPropertiesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/attachments/{attachment-id}/properties/{property-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"attachment-id"+"}", url.PathEscape(parameterValueToString(r.attachmentId, "attachmentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"property-id"+"}", url.PathEscape(parameterValueToString(r.propertyId, "propertyId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.serializeIdsAsStrings != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "serialize-ids-as-strings", r.serializeIdsAsStrings, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetBlogpostContentPropertiesRequest struct {
	ctx                   context.Context
	ApiService            ContentPropertiesApi
	blogpostId            int64
	key                   *string
	sort                  *ContentPropertySortOrder
	cursor                *string
	limit                 *int32
	serializeIdsAsStrings *bool
}

// Filters the response to return a specific content property with matching key (case sensitive).
func (r ApiGetBlogpostContentPropertiesRequest) Key(key string) ApiGetBlogpostContentPropertiesRequest {
	r.key = &key
	return r
}

// Used to sort the result by a particular field.
func (r ApiGetBlogpostContentPropertiesRequest) Sort(sort ContentPropertySortOrder) ApiGetBlogpostContentPropertiesRequest {
	r.sort = &sort
	return r
}

// Used for pagination, this opaque cursor will be returned in the &#x60;next&#x60; URL in the &#x60;Link&#x60; response header. Use the relative URL in the &#x60;Link&#x60; header to retrieve the &#x60;next&#x60; set of results.
func (r ApiGetBlogpostContentPropertiesRequest) Cursor(cursor string) ApiGetBlogpostContentPropertiesRequest {
	r.cursor = &cursor
	return r
}

// Maximum number of attachments per result to return. If more results exist, use the &#x60;Link&#x60; header to retrieve a relative URL that will return the next set of results.
func (r ApiGetBlogpostContentPropertiesRequest) Limit(limit int32) ApiGetBlogpostContentPropertiesRequest {
	r.limit = &limit
	return r
}

// Due to JavaScript&#39;s max integer representation of 2^53-1, the type of any IDs returned in the response body for this endpoint will be changed from a numeric type to a string type at the end of the deprecation period. In the meantime, this query param can be passed to this endpoint to opt-in to this change now. See this [changelog](https://developer.atlassian.com/cloud/confluence/changelog/#CHANGE-905) for more detail.
func (r ApiGetBlogpostContentPropertiesRequest) SerializeIdsAsStrings(serializeIdsAsStrings bool) ApiGetBlogpostContentPropertiesRequest {
	r.serializeIdsAsStrings = &serializeIdsAsStrings
	return r
}

func (r ApiGetBlogpostContentPropertiesRequest) Execute() (*MultiEntityResultContentProperty, *http.Response, error) {
	return r.ApiService.GetBlogpostContentPropertiesExecute(r)
}

/*
GetBlogpostContentProperties Get content properties for blog post

Retrieves all Content Properties tied to a specified blog post.

**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
Permission to view the blog post.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param blogpostId The ID of the blog post for which content properties should be returned.
	@return ApiGetBlogpostContentPropertiesRequest
*/
func (a *ContentPropertiesApiService) GetBlogpostContentProperties(ctx context.Context, blogpostId int64) ApiGetBlogpostContentPropertiesRequest {
	return ApiGetBlogpostContentPropertiesRequest{
		ApiService: a,
		ctx:        ctx,
		blogpostId: blogpostId,
	}
}

// Execute executes the request
//
//	@return MultiEntityResultContentProperty
func (a *ContentPropertiesApiService) GetBlogpostContentPropertiesExecute(r ApiGetBlogpostContentPropertiesRequest) (*MultiEntityResultContentProperty, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *MultiEntityResultContentProperty
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentPropertiesApiService.GetBlogpostContentProperties")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/blogposts/{blogpost-id}/properties"
	localVarPath = strings.Replace(localVarPath, "{"+"blogpost-id"+"}", url.PathEscape(parameterValueToString(r.blogpostId, "blogpostId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.key != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "key", r.key, "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "")
	}
	if r.cursor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cursor", r.cursor, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.serializeIdsAsStrings != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "serialize-ids-as-strings", r.serializeIdsAsStrings, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetBlogpostContentPropertiesByIdRequest struct {
	ctx                   context.Context
	ApiService            ContentPropertiesApi
	blogpostId            int64
	propertyId            int64
	serializeIdsAsStrings *bool
}

// Due to JavaScript&#39;s max integer representation of 2^53-1, the type of any IDs returned in the response body for this endpoint will be changed from a numeric type to a string type at the end of the deprecation period. In the meantime, this query param can be passed to this endpoint to opt-in to this change now. See this [changelog](https://developer.atlassian.com/cloud/confluence/changelog/#CHANGE-905) for more detail.
func (r ApiGetBlogpostContentPropertiesByIdRequest) SerializeIdsAsStrings(serializeIdsAsStrings bool) ApiGetBlogpostContentPropertiesByIdRequest {
	r.serializeIdsAsStrings = &serializeIdsAsStrings
	return r
}

func (r ApiGetBlogpostContentPropertiesByIdRequest) Execute() (*ContentProperty, *http.Response, error) {
	return r.ApiService.GetBlogpostContentPropertiesByIdExecute(r)
}

/*
GetBlogpostContentPropertiesById Get content property for blog post by id

Retrieves a specific Content Property by ID that is attached to a specified blog post.

**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
Permission to view the blog post.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param blogpostId The ID of the blog post for which content properties should be returned.
	@param propertyId The ID of the property being requested
	@return ApiGetBlogpostContentPropertiesByIdRequest
*/
func (a *ContentPropertiesApiService) GetBlogpostContentPropertiesById(ctx context.Context, blogpostId int64, propertyId int64) ApiGetBlogpostContentPropertiesByIdRequest {
	return ApiGetBlogpostContentPropertiesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		blogpostId: blogpostId,
		propertyId: propertyId,
	}
}

// Execute executes the request
//
//	@return ContentProperty
func (a *ContentPropertiesApiService) GetBlogpostContentPropertiesByIdExecute(r ApiGetBlogpostContentPropertiesByIdRequest) (*ContentProperty, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ContentProperty
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentPropertiesApiService.GetBlogpostContentPropertiesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/blogposts/{blogpost-id}/properties/{property-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"blogpost-id"+"}", url.PathEscape(parameterValueToString(r.blogpostId, "blogpostId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"property-id"+"}", url.PathEscape(parameterValueToString(r.propertyId, "propertyId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.serializeIdsAsStrings != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "serialize-ids-as-strings", r.serializeIdsAsStrings, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCommentContentPropertiesRequest struct {
	ctx                   context.Context
	ApiService            ContentPropertiesApi
	commentId             int64
	key                   *string
	sort                  *ContentPropertySortOrder
	cursor                *string
	limit                 *int32
	serializeIdsAsStrings *bool
}

// Filters the response to return a specific content property with matching key (case sensitive).
func (r ApiGetCommentContentPropertiesRequest) Key(key string) ApiGetCommentContentPropertiesRequest {
	r.key = &key
	return r
}

// Used to sort the result by a particular field.
func (r ApiGetCommentContentPropertiesRequest) Sort(sort ContentPropertySortOrder) ApiGetCommentContentPropertiesRequest {
	r.sort = &sort
	return r
}

// Used for pagination, this opaque cursor will be returned in the &#x60;next&#x60; URL in the &#x60;Link&#x60; response header. Use the relative URL in the &#x60;Link&#x60; header to retrieve the &#x60;next&#x60; set of results.
func (r ApiGetCommentContentPropertiesRequest) Cursor(cursor string) ApiGetCommentContentPropertiesRequest {
	r.cursor = &cursor
	return r
}

// Maximum number of attachments per result to return. If more results exist, use the &#x60;Link&#x60; header to retrieve a relative URL that will return the next set of results.
func (r ApiGetCommentContentPropertiesRequest) Limit(limit int32) ApiGetCommentContentPropertiesRequest {
	r.limit = &limit
	return r
}

// Due to JavaScript&#39;s max integer representation of 2^53-1, the type of any IDs returned in the response body for this endpoint will be changed from a numeric type to a string type at the end of the deprecation period. In the meantime, this query param can be passed to this endpoint to opt-in to this change now. See this [changelog](https://developer.atlassian.com/cloud/confluence/changelog/#CHANGE-905) for more detail.
func (r ApiGetCommentContentPropertiesRequest) SerializeIdsAsStrings(serializeIdsAsStrings bool) ApiGetCommentContentPropertiesRequest {
	r.serializeIdsAsStrings = &serializeIdsAsStrings
	return r
}

func (r ApiGetCommentContentPropertiesRequest) Execute() (*MultiEntityResultContentProperty, *http.Response, error) {
	return r.ApiService.GetCommentContentPropertiesExecute(r)
}

/*
GetCommentContentProperties Get content properties for comment

Retrieves Content Properties attached to a specified comment.

**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
Permission to view the comment.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param commentId The ID of the comment for which content properties should be returned.
	@return ApiGetCommentContentPropertiesRequest
*/
func (a *ContentPropertiesApiService) GetCommentContentProperties(ctx context.Context, commentId int64) ApiGetCommentContentPropertiesRequest {
	return ApiGetCommentContentPropertiesRequest{
		ApiService: a,
		ctx:        ctx,
		commentId:  commentId,
	}
}

// Execute executes the request
//
//	@return MultiEntityResultContentProperty
func (a *ContentPropertiesApiService) GetCommentContentPropertiesExecute(r ApiGetCommentContentPropertiesRequest) (*MultiEntityResultContentProperty, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *MultiEntityResultContentProperty
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentPropertiesApiService.GetCommentContentProperties")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/comments/{comment-id}/properties"
	localVarPath = strings.Replace(localVarPath, "{"+"comment-id"+"}", url.PathEscape(parameterValueToString(r.commentId, "commentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.key != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "key", r.key, "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "")
	}
	if r.cursor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cursor", r.cursor, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.serializeIdsAsStrings != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "serialize-ids-as-strings", r.serializeIdsAsStrings, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCommentContentPropertiesByIdRequest struct {
	ctx                   context.Context
	ApiService            ContentPropertiesApi
	commentId             int64
	propertyId            int64
	serializeIdsAsStrings *bool
}

// Due to JavaScript&#39;s max integer representation of 2^53-1, the type of any IDs returned in the response body for this endpoint will be changed from a numeric type to a string type at the end of the deprecation period. In the meantime, this query param can be passed to this endpoint to opt-in to this change now. See this [changelog](https://developer.atlassian.com/cloud/confluence/changelog/#CHANGE-905) for more detail.
func (r ApiGetCommentContentPropertiesByIdRequest) SerializeIdsAsStrings(serializeIdsAsStrings bool) ApiGetCommentContentPropertiesByIdRequest {
	r.serializeIdsAsStrings = &serializeIdsAsStrings
	return r
}

func (r ApiGetCommentContentPropertiesByIdRequest) Execute() (*ContentProperty, *http.Response, error) {
	return r.ApiService.GetCommentContentPropertiesByIdExecute(r)
}

/*
GetCommentContentPropertiesById Get content property for comment by id

Retrieves a specific Content Property by ID that is attached to a specified comment.

**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
Permission to view the comment.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param commentId The ID of the comment for which content properties should be returned.
	@param propertyId The ID of the content property being requested.
	@return ApiGetCommentContentPropertiesByIdRequest
*/
func (a *ContentPropertiesApiService) GetCommentContentPropertiesById(ctx context.Context, commentId int64, propertyId int64) ApiGetCommentContentPropertiesByIdRequest {
	return ApiGetCommentContentPropertiesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		commentId:  commentId,
		propertyId: propertyId,
	}
}

// Execute executes the request
//
//	@return ContentProperty
func (a *ContentPropertiesApiService) GetCommentContentPropertiesByIdExecute(r ApiGetCommentContentPropertiesByIdRequest) (*ContentProperty, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ContentProperty
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentPropertiesApiService.GetCommentContentPropertiesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/comments/{comment-id}/properties/{property-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"comment-id"+"}", url.PathEscape(parameterValueToString(r.commentId, "commentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"property-id"+"}", url.PathEscape(parameterValueToString(r.propertyId, "propertyId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.serializeIdsAsStrings != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "serialize-ids-as-strings", r.serializeIdsAsStrings, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCustomContentContentPropertiesRequest struct {
	ctx                   context.Context
	ApiService            ContentPropertiesApi
	customContentId       int64
	key                   *string
	sort                  *ContentPropertySortOrder
	cursor                *string
	limit                 *int32
	serializeIdsAsStrings *bool
}

// Filters the response to return a specific content property with matching key (case sensitive).
func (r ApiGetCustomContentContentPropertiesRequest) Key(key string) ApiGetCustomContentContentPropertiesRequest {
	r.key = &key
	return r
}

// Used to sort the result by a particular field.
func (r ApiGetCustomContentContentPropertiesRequest) Sort(sort ContentPropertySortOrder) ApiGetCustomContentContentPropertiesRequest {
	r.sort = &sort
	return r
}

// Used for pagination, this opaque cursor will be returned in the &#x60;next&#x60; URL in the &#x60;Link&#x60; response header. Use the relative URL in the &#x60;Link&#x60; header to retrieve the &#x60;next&#x60; set of results.
func (r ApiGetCustomContentContentPropertiesRequest) Cursor(cursor string) ApiGetCustomContentContentPropertiesRequest {
	r.cursor = &cursor
	return r
}

// Maximum number of attachments per result to return. If more results exist, use the &#x60;Link&#x60; header to retrieve a relative URL that will return the next set of results.
func (r ApiGetCustomContentContentPropertiesRequest) Limit(limit int32) ApiGetCustomContentContentPropertiesRequest {
	r.limit = &limit
	return r
}

// Due to JavaScript&#39;s max integer representation of 2^53-1, the type of any IDs returned in the response body for this endpoint will be changed from a numeric type to a string type at the end of the deprecation period. In the meantime, this query param can be passed to this endpoint to opt-in to this change now. See this [changelog](https://developer.atlassian.com/cloud/confluence/changelog/#CHANGE-905) for more detail.
func (r ApiGetCustomContentContentPropertiesRequest) SerializeIdsAsStrings(serializeIdsAsStrings bool) ApiGetCustomContentContentPropertiesRequest {
	r.serializeIdsAsStrings = &serializeIdsAsStrings
	return r
}

func (r ApiGetCustomContentContentPropertiesRequest) Execute() (*MultiEntityResultContentProperty, *http.Response, error) {
	return r.ApiService.GetCustomContentContentPropertiesExecute(r)
}

/*
GetCustomContentContentProperties Get content properties for custom content

Retrieves Content Properties tied to a specified custom content.

**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
Permission to view the custom content.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param customContentId The ID of the custom content for which content properties should be returned.
	@return ApiGetCustomContentContentPropertiesRequest
*/
func (a *ContentPropertiesApiService) GetCustomContentContentProperties(ctx context.Context, customContentId int64) ApiGetCustomContentContentPropertiesRequest {
	return ApiGetCustomContentContentPropertiesRequest{
		ApiService:      a,
		ctx:             ctx,
		customContentId: customContentId,
	}
}

// Execute executes the request
//
//	@return MultiEntityResultContentProperty
func (a *ContentPropertiesApiService) GetCustomContentContentPropertiesExecute(r ApiGetCustomContentContentPropertiesRequest) (*MultiEntityResultContentProperty, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *MultiEntityResultContentProperty
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentPropertiesApiService.GetCustomContentContentProperties")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/custom-content/{custom-content-id}/properties"
	localVarPath = strings.Replace(localVarPath, "{"+"custom-content-id"+"}", url.PathEscape(parameterValueToString(r.customContentId, "customContentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.key != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "key", r.key, "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "")
	}
	if r.cursor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cursor", r.cursor, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.serializeIdsAsStrings != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "serialize-ids-as-strings", r.serializeIdsAsStrings, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCustomContentContentPropertiesByIdRequest struct {
	ctx                   context.Context
	ApiService            ContentPropertiesApi
	customContentId       int64
	propertyId            int64
	serializeIdsAsStrings *bool
}

// Due to JavaScript&#39;s max integer representation of 2^53-1, the type of any IDs returned in the response body for this endpoint will be changed from a numeric type to a string type at the end of the deprecation period. In the meantime, this query param can be passed to this endpoint to opt-in to this change now. See this [changelog](https://developer.atlassian.com/cloud/confluence/changelog/#CHANGE-905) for more detail.
func (r ApiGetCustomContentContentPropertiesByIdRequest) SerializeIdsAsStrings(serializeIdsAsStrings bool) ApiGetCustomContentContentPropertiesByIdRequest {
	r.serializeIdsAsStrings = &serializeIdsAsStrings
	return r
}

func (r ApiGetCustomContentContentPropertiesByIdRequest) Execute() (*ContentProperty, *http.Response, error) {
	return r.ApiService.GetCustomContentContentPropertiesByIdExecute(r)
}

/*
GetCustomContentContentPropertiesById Get content property for custom content by id

Retrieves a specific Content Property by ID that is attached to a specified custom content.

**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
Permission to view the page.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param customContentId The ID of the custom content for which content properties should be returned.
	@param propertyId The ID of the content property being requested.
	@return ApiGetCustomContentContentPropertiesByIdRequest
*/
func (a *ContentPropertiesApiService) GetCustomContentContentPropertiesById(ctx context.Context, customContentId int64, propertyId int64) ApiGetCustomContentContentPropertiesByIdRequest {
	return ApiGetCustomContentContentPropertiesByIdRequest{
		ApiService:      a,
		ctx:             ctx,
		customContentId: customContentId,
		propertyId:      propertyId,
	}
}

// Execute executes the request
//
//	@return ContentProperty
func (a *ContentPropertiesApiService) GetCustomContentContentPropertiesByIdExecute(r ApiGetCustomContentContentPropertiesByIdRequest) (*ContentProperty, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ContentProperty
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentPropertiesApiService.GetCustomContentContentPropertiesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/custom-content/{custom-content-id}/properties/{property-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"custom-content-id"+"}", url.PathEscape(parameterValueToString(r.customContentId, "customContentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"property-id"+"}", url.PathEscape(parameterValueToString(r.propertyId, "propertyId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.serializeIdsAsStrings != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "serialize-ids-as-strings", r.serializeIdsAsStrings, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetPageContentPropertiesRequest struct {
	ctx                   context.Context
	ApiService            ContentPropertiesApi
	pageId                int64
	key                   *string
	sort                  *ContentPropertySortOrder
	cursor                *string
	limit                 *int32
	serializeIdsAsStrings *bool
}

// Filters the response to return a specific content property with matching key (case sensitive).
func (r ApiGetPageContentPropertiesRequest) Key(key string) ApiGetPageContentPropertiesRequest {
	r.key = &key
	return r
}

// Used to sort the result by a particular field.
func (r ApiGetPageContentPropertiesRequest) Sort(sort ContentPropertySortOrder) ApiGetPageContentPropertiesRequest {
	r.sort = &sort
	return r
}

// Used for pagination, this opaque cursor will be returned in the &#x60;next&#x60; URL in the &#x60;Link&#x60; response header. Use the relative URL in the &#x60;Link&#x60; header to retrieve the &#x60;next&#x60; set of results.
func (r ApiGetPageContentPropertiesRequest) Cursor(cursor string) ApiGetPageContentPropertiesRequest {
	r.cursor = &cursor
	return r
}

// Maximum number of attachments per result to return. If more results exist, use the &#x60;Link&#x60; header to retrieve a relative URL that will return the next set of results.
func (r ApiGetPageContentPropertiesRequest) Limit(limit int32) ApiGetPageContentPropertiesRequest {
	r.limit = &limit
	return r
}

// Due to JavaScript&#39;s max integer representation of 2^53-1, the type of any IDs returned in the response body for this endpoint will be changed from a numeric type to a string type at the end of the deprecation period. In the meantime, this query param can be passed to this endpoint to opt-in to this change now. See this [changelog](https://developer.atlassian.com/cloud/confluence/changelog/#CHANGE-905) for more detail.
func (r ApiGetPageContentPropertiesRequest) SerializeIdsAsStrings(serializeIdsAsStrings bool) ApiGetPageContentPropertiesRequest {
	r.serializeIdsAsStrings = &serializeIdsAsStrings
	return r
}

func (r ApiGetPageContentPropertiesRequest) Execute() (*MultiEntityResultContentProperty, *http.Response, error) {
	return r.ApiService.GetPageContentPropertiesExecute(r)
}

/*
GetPageContentProperties Get content properties for page

Retrieves Content Properties tied to a specified page.

**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
Permission to view the page.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param pageId The ID of the page for which content properties should be returned.
	@return ApiGetPageContentPropertiesRequest
*/
func (a *ContentPropertiesApiService) GetPageContentProperties(ctx context.Context, pageId int64) ApiGetPageContentPropertiesRequest {
	return ApiGetPageContentPropertiesRequest{
		ApiService: a,
		ctx:        ctx,
		pageId:     pageId,
	}
}

// Execute executes the request
//
//	@return MultiEntityResultContentProperty
func (a *ContentPropertiesApiService) GetPageContentPropertiesExecute(r ApiGetPageContentPropertiesRequest) (*MultiEntityResultContentProperty, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *MultiEntityResultContentProperty
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentPropertiesApiService.GetPageContentProperties")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pages/{page-id}/properties"
	localVarPath = strings.Replace(localVarPath, "{"+"page-id"+"}", url.PathEscape(parameterValueToString(r.pageId, "pageId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.key != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "key", r.key, "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "")
	}
	if r.cursor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cursor", r.cursor, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.serializeIdsAsStrings != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "serialize-ids-as-strings", r.serializeIdsAsStrings, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetPageContentPropertiesByIdRequest struct {
	ctx                   context.Context
	ApiService            ContentPropertiesApi
	pageId                int64
	propertyId            int64
	serializeIdsAsStrings *bool
}

// Due to JavaScript&#39;s max integer representation of 2^53-1, the type of any IDs returned in the response body for this endpoint will be changed from a numeric type to a string type at the end of the deprecation period. In the meantime, this query param can be passed to this endpoint to opt-in to this change now. See this [changelog](https://developer.atlassian.com/cloud/confluence/changelog/#CHANGE-905) for more detail.
func (r ApiGetPageContentPropertiesByIdRequest) SerializeIdsAsStrings(serializeIdsAsStrings bool) ApiGetPageContentPropertiesByIdRequest {
	r.serializeIdsAsStrings = &serializeIdsAsStrings
	return r
}

func (r ApiGetPageContentPropertiesByIdRequest) Execute() (*ContentProperty, *http.Response, error) {
	return r.ApiService.GetPageContentPropertiesByIdExecute(r)
}

/*
GetPageContentPropertiesById Get content property for page by id

Retrieves a specific Content Property by ID that is attached to a specified page.

**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
Permission to view the page.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param pageId The ID of the page for which content properties should be returned.
	@param propertyId The ID of the content property being requested.
	@return ApiGetPageContentPropertiesByIdRequest
*/
func (a *ContentPropertiesApiService) GetPageContentPropertiesById(ctx context.Context, pageId int64, propertyId int64) ApiGetPageContentPropertiesByIdRequest {
	return ApiGetPageContentPropertiesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		pageId:     pageId,
		propertyId: propertyId,
	}
}

// Execute executes the request
//
//	@return ContentProperty
func (a *ContentPropertiesApiService) GetPageContentPropertiesByIdExecute(r ApiGetPageContentPropertiesByIdRequest) (*ContentProperty, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ContentProperty
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentPropertiesApiService.GetPageContentPropertiesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pages/{page-id}/properties/{property-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"page-id"+"}", url.PathEscape(parameterValueToString(r.pageId, "pageId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"property-id"+"}", url.PathEscape(parameterValueToString(r.propertyId, "propertyId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.serializeIdsAsStrings != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "serialize-ids-as-strings", r.serializeIdsAsStrings, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateAttachmentPropertyByIdRequest struct {
	ctx                          context.Context
	ApiService                   ContentPropertiesApi
	attachmentId                 string
	propertyId                   int64
	contentPropertyUpdateRequest *ContentPropertyUpdateRequest
	serializeIdsAsStrings        *bool
}

// The attachment property to be updated.
func (r ApiUpdateAttachmentPropertyByIdRequest) ContentPropertyUpdateRequest(contentPropertyUpdateRequest ContentPropertyUpdateRequest) ApiUpdateAttachmentPropertyByIdRequest {
	r.contentPropertyUpdateRequest = &contentPropertyUpdateRequest
	return r
}

// Due to JavaScript&#39;s max integer representation of 2^53-1, the type of any IDs returned in the response body for this endpoint will be changed from a numeric type to a string type at the end of the deprecation period. In the meantime, this query param can be passed to this endpoint to opt-in to this change now. See this [changelog](https://developer.atlassian.com/cloud/confluence/changelog/#CHANGE-905) for more detail.
func (r ApiUpdateAttachmentPropertyByIdRequest) SerializeIdsAsStrings(serializeIdsAsStrings bool) ApiUpdateAttachmentPropertyByIdRequest {
	r.serializeIdsAsStrings = &serializeIdsAsStrings
	return r
}

func (r ApiUpdateAttachmentPropertyByIdRequest) Execute() (*ContentProperty, *http.Response, error) {
	return r.ApiService.UpdateAttachmentPropertyByIdExecute(r)
}

/*
UpdateAttachmentPropertyById Update attachment property by id

Update an attachment property by its id.

**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
Permission to edit the attachment.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param attachmentId The ID of the attachment the property belongs to.
	@param propertyId The ID of the property to be updated.
	@return ApiUpdateAttachmentPropertyByIdRequest
*/
func (a *ContentPropertiesApiService) UpdateAttachmentPropertyById(ctx context.Context, attachmentId string, propertyId int64) ApiUpdateAttachmentPropertyByIdRequest {
	return ApiUpdateAttachmentPropertyByIdRequest{
		ApiService:   a,
		ctx:          ctx,
		attachmentId: attachmentId,
		propertyId:   propertyId,
	}
}

// Execute executes the request
//
//	@return ContentProperty
func (a *ContentPropertiesApiService) UpdateAttachmentPropertyByIdExecute(r ApiUpdateAttachmentPropertyByIdRequest) (*ContentProperty, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ContentProperty
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentPropertiesApiService.UpdateAttachmentPropertyById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/attachments/{attachment-id}/properties/{property-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"attachment-id"+"}", url.PathEscape(parameterValueToString(r.attachmentId, "attachmentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"property-id"+"}", url.PathEscape(parameterValueToString(r.propertyId, "propertyId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.contentPropertyUpdateRequest == nil {
		return localVarReturnValue, nil, reportError("contentPropertyUpdateRequest is required and must be specified")
	}

	if r.serializeIdsAsStrings != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "serialize-ids-as-strings", r.serializeIdsAsStrings, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.contentPropertyUpdateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateBlogpostPropertyByIdRequest struct {
	ctx                          context.Context
	ApiService                   ContentPropertiesApi
	blogpostId                   int64
	propertyId                   int64
	contentPropertyUpdateRequest *ContentPropertyUpdateRequest
	serializeIdsAsStrings        *bool
}

// The blog post property to be updated.
func (r ApiUpdateBlogpostPropertyByIdRequest) ContentPropertyUpdateRequest(contentPropertyUpdateRequest ContentPropertyUpdateRequest) ApiUpdateBlogpostPropertyByIdRequest {
	r.contentPropertyUpdateRequest = &contentPropertyUpdateRequest
	return r
}

// Due to JavaScript&#39;s max integer representation of 2^53-1, the type of any IDs returned in the response body for this endpoint will be changed from a numeric type to a string type at the end of the deprecation period. In the meantime, this query param can be passed to this endpoint to opt-in to this change now. See this [changelog](https://developer.atlassian.com/cloud/confluence/changelog/#CHANGE-905) for more detail.
func (r ApiUpdateBlogpostPropertyByIdRequest) SerializeIdsAsStrings(serializeIdsAsStrings bool) ApiUpdateBlogpostPropertyByIdRequest {
	r.serializeIdsAsStrings = &serializeIdsAsStrings
	return r
}

func (r ApiUpdateBlogpostPropertyByIdRequest) Execute() (*ContentProperty, *http.Response, error) {
	return r.ApiService.UpdateBlogpostPropertyByIdExecute(r)
}

/*
UpdateBlogpostPropertyById Update blog post property by id

Update a blog post property by its id.

**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
Permission to edit the blog post.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param blogpostId The ID of the blog post the property belongs to.
	@param propertyId The ID of the property to be updated.
	@return ApiUpdateBlogpostPropertyByIdRequest
*/
func (a *ContentPropertiesApiService) UpdateBlogpostPropertyById(ctx context.Context, blogpostId int64, propertyId int64) ApiUpdateBlogpostPropertyByIdRequest {
	return ApiUpdateBlogpostPropertyByIdRequest{
		ApiService: a,
		ctx:        ctx,
		blogpostId: blogpostId,
		propertyId: propertyId,
	}
}

// Execute executes the request
//
//	@return ContentProperty
func (a *ContentPropertiesApiService) UpdateBlogpostPropertyByIdExecute(r ApiUpdateBlogpostPropertyByIdRequest) (*ContentProperty, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ContentProperty
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentPropertiesApiService.UpdateBlogpostPropertyById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/blogposts/{blogpost-id}/properties/{property-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"blogpost-id"+"}", url.PathEscape(parameterValueToString(r.blogpostId, "blogpostId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"property-id"+"}", url.PathEscape(parameterValueToString(r.propertyId, "propertyId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.contentPropertyUpdateRequest == nil {
		return localVarReturnValue, nil, reportError("contentPropertyUpdateRequest is required and must be specified")
	}

	if r.serializeIdsAsStrings != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "serialize-ids-as-strings", r.serializeIdsAsStrings, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.contentPropertyUpdateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateCommentPropertyByIdRequest struct {
	ctx                          context.Context
	ApiService                   ContentPropertiesApi
	commentId                    int64
	propertyId                   int64
	contentPropertyUpdateRequest *ContentPropertyUpdateRequest
	serializeIdsAsStrings        *bool
}

// The comment property to be updated.
func (r ApiUpdateCommentPropertyByIdRequest) ContentPropertyUpdateRequest(contentPropertyUpdateRequest ContentPropertyUpdateRequest) ApiUpdateCommentPropertyByIdRequest {
	r.contentPropertyUpdateRequest = &contentPropertyUpdateRequest
	return r
}

// Due to JavaScript&#39;s max integer representation of 2^53-1, the type of any IDs returned in the response body for this endpoint will be changed from a numeric type to a string type at the end of the deprecation period. In the meantime, this query param can be passed to this endpoint to opt-in to this change now. See this [changelog](https://developer.atlassian.com/cloud/confluence/changelog/#CHANGE-905) for more detail.
func (r ApiUpdateCommentPropertyByIdRequest) SerializeIdsAsStrings(serializeIdsAsStrings bool) ApiUpdateCommentPropertyByIdRequest {
	r.serializeIdsAsStrings = &serializeIdsAsStrings
	return r
}

func (r ApiUpdateCommentPropertyByIdRequest) Execute() (*ContentProperty, *http.Response, error) {
	return r.ApiService.UpdateCommentPropertyByIdExecute(r)
}

/*
UpdateCommentPropertyById Update comment property by id

Update a comment property by its id.

**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
Permission to edit the comment.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param commentId The ID of the comment the property belongs to.
	@param propertyId The ID of the property to be updated.
	@return ApiUpdateCommentPropertyByIdRequest
*/
func (a *ContentPropertiesApiService) UpdateCommentPropertyById(ctx context.Context, commentId int64, propertyId int64) ApiUpdateCommentPropertyByIdRequest {
	return ApiUpdateCommentPropertyByIdRequest{
		ApiService: a,
		ctx:        ctx,
		commentId:  commentId,
		propertyId: propertyId,
	}
}

// Execute executes the request
//
//	@return ContentProperty
func (a *ContentPropertiesApiService) UpdateCommentPropertyByIdExecute(r ApiUpdateCommentPropertyByIdRequest) (*ContentProperty, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ContentProperty
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentPropertiesApiService.UpdateCommentPropertyById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/comments/{comment-id}/properties/{property-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"comment-id"+"}", url.PathEscape(parameterValueToString(r.commentId, "commentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"property-id"+"}", url.PathEscape(parameterValueToString(r.propertyId, "propertyId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.contentPropertyUpdateRequest == nil {
		return localVarReturnValue, nil, reportError("contentPropertyUpdateRequest is required and must be specified")
	}

	if r.serializeIdsAsStrings != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "serialize-ids-as-strings", r.serializeIdsAsStrings, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.contentPropertyUpdateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateCustomContentPropertyByIdRequest struct {
	ctx                          context.Context
	ApiService                   ContentPropertiesApi
	customContentId              int64
	propertyId                   int64
	contentPropertyUpdateRequest *ContentPropertyUpdateRequest
	serializeIdsAsStrings        *bool
}

// The custom content property to be updated.
func (r ApiUpdateCustomContentPropertyByIdRequest) ContentPropertyUpdateRequest(contentPropertyUpdateRequest ContentPropertyUpdateRequest) ApiUpdateCustomContentPropertyByIdRequest {
	r.contentPropertyUpdateRequest = &contentPropertyUpdateRequest
	return r
}

// Due to JavaScript&#39;s max integer representation of 2^53-1, the type of any IDs returned in the response body for this endpoint will be changed from a numeric type to a string type at the end of the deprecation period. In the meantime, this query param can be passed to this endpoint to opt-in to this change now. See this [changelog](https://developer.atlassian.com/cloud/confluence/changelog/#CHANGE-905) for more detail.
func (r ApiUpdateCustomContentPropertyByIdRequest) SerializeIdsAsStrings(serializeIdsAsStrings bool) ApiUpdateCustomContentPropertyByIdRequest {
	r.serializeIdsAsStrings = &serializeIdsAsStrings
	return r
}

func (r ApiUpdateCustomContentPropertyByIdRequest) Execute() (*ContentProperty, *http.Response, error) {
	return r.ApiService.UpdateCustomContentPropertyByIdExecute(r)
}

/*
UpdateCustomContentPropertyById Update custom content property by id

Update a custom content property by its id.

**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
Permission to edit the custom content.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param customContentId The ID of the custom content the property belongs to.
	@param propertyId The ID of the property to be updated.
	@return ApiUpdateCustomContentPropertyByIdRequest
*/
func (a *ContentPropertiesApiService) UpdateCustomContentPropertyById(ctx context.Context, customContentId int64, propertyId int64) ApiUpdateCustomContentPropertyByIdRequest {
	return ApiUpdateCustomContentPropertyByIdRequest{
		ApiService:      a,
		ctx:             ctx,
		customContentId: customContentId,
		propertyId:      propertyId,
	}
}

// Execute executes the request
//
//	@return ContentProperty
func (a *ContentPropertiesApiService) UpdateCustomContentPropertyByIdExecute(r ApiUpdateCustomContentPropertyByIdRequest) (*ContentProperty, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ContentProperty
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentPropertiesApiService.UpdateCustomContentPropertyById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/custom-content/{custom-content-id}/properties/{property-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"custom-content-id"+"}", url.PathEscape(parameterValueToString(r.customContentId, "customContentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"property-id"+"}", url.PathEscape(parameterValueToString(r.propertyId, "propertyId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.contentPropertyUpdateRequest == nil {
		return localVarReturnValue, nil, reportError("contentPropertyUpdateRequest is required and must be specified")
	}

	if r.serializeIdsAsStrings != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "serialize-ids-as-strings", r.serializeIdsAsStrings, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.contentPropertyUpdateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdatePagePropertyByIdRequest struct {
	ctx                          context.Context
	ApiService                   ContentPropertiesApi
	pageId                       int64
	propertyId                   int64
	contentPropertyUpdateRequest *ContentPropertyUpdateRequest
	serializeIdsAsStrings        *bool
}

// The page property to be updated.
func (r ApiUpdatePagePropertyByIdRequest) ContentPropertyUpdateRequest(contentPropertyUpdateRequest ContentPropertyUpdateRequest) ApiUpdatePagePropertyByIdRequest {
	r.contentPropertyUpdateRequest = &contentPropertyUpdateRequest
	return r
}

// Due to JavaScript&#39;s max integer representation of 2^53-1, the type of any IDs returned in the response body for this endpoint will be changed from a numeric type to a string type at the end of the deprecation period. In the meantime, this query param can be passed to this endpoint to opt-in to this change now. See this [changelog](https://developer.atlassian.com/cloud/confluence/changelog/#CHANGE-905) for more detail.
func (r ApiUpdatePagePropertyByIdRequest) SerializeIdsAsStrings(serializeIdsAsStrings bool) ApiUpdatePagePropertyByIdRequest {
	r.serializeIdsAsStrings = &serializeIdsAsStrings
	return r
}

func (r ApiUpdatePagePropertyByIdRequest) Execute() (*ContentProperty, *http.Response, error) {
	return r.ApiService.UpdatePagePropertyByIdExecute(r)
}

/*
UpdatePagePropertyById Update page property by id

Update a page property by its id.

**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
Permission to edit the page.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param pageId The ID of the page the property belongs to.
	@param propertyId The ID of the property to be updated.
	@return ApiUpdatePagePropertyByIdRequest
*/
func (a *ContentPropertiesApiService) UpdatePagePropertyById(ctx context.Context, pageId int64, propertyId int64) ApiUpdatePagePropertyByIdRequest {
	return ApiUpdatePagePropertyByIdRequest{
		ApiService: a,
		ctx:        ctx,
		pageId:     pageId,
		propertyId: propertyId,
	}
}

// Execute executes the request
//
//	@return ContentProperty
func (a *ContentPropertiesApiService) UpdatePagePropertyByIdExecute(r ApiUpdatePagePropertyByIdRequest) (*ContentProperty, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ContentProperty
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentPropertiesApiService.UpdatePagePropertyById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pages/{page-id}/properties/{property-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"page-id"+"}", url.PathEscape(parameterValueToString(r.pageId, "pageId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"property-id"+"}", url.PathEscape(parameterValueToString(r.propertyId, "propertyId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.contentPropertyUpdateRequest == nil {
		return localVarReturnValue, nil, reportError("contentPropertyUpdateRequest is required and must be specified")
	}

	if r.serializeIdsAsStrings != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "serialize-ids-as-strings", r.serializeIdsAsStrings, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.contentPropertyUpdateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
