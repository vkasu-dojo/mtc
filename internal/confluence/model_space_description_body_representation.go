/*
The Confluence Cloud REST API v2

This document describes Confluence's v2 APIs. This is intended to be an iteration on the existing Confluence Cloud REST API with improvements in both endpoint definitions and performance.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package confluence

import (
	"encoding/json"
	"fmt"
)

// SpaceDescriptionBodyRepresentation The formats a space description can be represented as. A subset of BodyRepresentation.
type SpaceDescriptionBodyRepresentation string

// List of SpaceDescriptionBodyRepresentation
const (
	SPACEDESCRIPTIONBODYREPRESENTATION_PLAIN SpaceDescriptionBodyRepresentation = "plain"
	SPACEDESCRIPTIONBODYREPRESENTATION_VIEW  SpaceDescriptionBodyRepresentation = "view"
)

// All allowed values of SpaceDescriptionBodyRepresentation enum
var AllowedSpaceDescriptionBodyRepresentationEnumValues = []SpaceDescriptionBodyRepresentation{
	"plain",
	"view",
}

func (v *SpaceDescriptionBodyRepresentation) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SpaceDescriptionBodyRepresentation(value)
	for _, existing := range AllowedSpaceDescriptionBodyRepresentationEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SpaceDescriptionBodyRepresentation", value)
}

// NewSpaceDescriptionBodyRepresentationFromValue returns a pointer to a valid SpaceDescriptionBodyRepresentation
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSpaceDescriptionBodyRepresentationFromValue(v string) (*SpaceDescriptionBodyRepresentation, error) {
	ev := SpaceDescriptionBodyRepresentation(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SpaceDescriptionBodyRepresentation: valid values are %v", v, AllowedSpaceDescriptionBodyRepresentationEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SpaceDescriptionBodyRepresentation) IsValid() bool {
	for _, existing := range AllowedSpaceDescriptionBodyRepresentationEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SpaceDescriptionBodyRepresentation value
func (v SpaceDescriptionBodyRepresentation) Ptr() *SpaceDescriptionBodyRepresentation {
	return &v
}

type NullableSpaceDescriptionBodyRepresentation struct {
	value *SpaceDescriptionBodyRepresentation
	isSet bool
}

func (v NullableSpaceDescriptionBodyRepresentation) Get() *SpaceDescriptionBodyRepresentation {
	return v.value
}

func (v *NullableSpaceDescriptionBodyRepresentation) Set(val *SpaceDescriptionBodyRepresentation) {
	v.value = val
	v.isSet = true
}

func (v NullableSpaceDescriptionBodyRepresentation) IsSet() bool {
	return v.isSet
}

func (v *NullableSpaceDescriptionBodyRepresentation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpaceDescriptionBodyRepresentation(val *SpaceDescriptionBodyRepresentation) *NullableSpaceDescriptionBodyRepresentation {
	return &NullableSpaceDescriptionBodyRepresentation{value: val, isSet: true}
}

func (v NullableSpaceDescriptionBodyRepresentation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpaceDescriptionBodyRepresentation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
